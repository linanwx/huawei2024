<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="634" onload="init(evt)" viewBox="0 0 1200 634" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="634" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python evaluation_example.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="623.00"> </text><svg id="frames" x="10" width="1180" total_samples="2988"><g><title>apply_series_generator (pandas/core/apply.py:1079) (3 samples, 0.10%)</title><rect x="0.1673%" y="292" width="0.1004%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="3"/><text x="0.4173%" y="302.50"></text></g><g><title>series_generator (pandas/core/apply.py:1271) (3 samples, 0.10%)</title><rect x="0.1673%" y="308" width="0.1004%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="3"/><text x="0.4173%" y="318.50"></text></g><g><title>check_release_time (evaluation.py:109) (13 samples, 0.44%)</title><rect x="0.3012%" y="308" width="0.4351%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="13"/><text x="0.5512%" y="318.50"></text></g><g><title>get_evaluation (evaluation.py:344) (20 samples, 0.67%)</title><rect x="0.1339%" y="196" width="0.6693%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="20"/><text x="0.3839%" y="206.50"></text></g><g><title>solution_data_preparation (evaluation.py:65) (19 samples, 0.64%)</title><rect x="0.1673%" y="212" width="0.6359%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="19"/><text x="0.4173%" y="222.50"></text></g><g><title>check_server_usage_by_release_time (evaluation.py:101) (19 samples, 0.64%)</title><rect x="0.1673%" y="228" width="0.6359%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="19"/><text x="0.4173%" y="238.50"></text></g><g><title>apply (pandas/core/frame.py:10374) (19 samples, 0.64%)</title><rect x="0.1673%" y="244" width="0.6359%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="19"/><text x="0.4173%" y="254.50"></text></g><g><title>apply (pandas/core/apply.py:916) (19 samples, 0.64%)</title><rect x="0.1673%" y="260" width="0.6359%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="19"/><text x="0.4173%" y="270.50"></text></g><g><title>apply_standard (pandas/core/apply.py:1063) (19 samples, 0.64%)</title><rect x="0.1673%" y="276" width="0.6359%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="19"/><text x="0.4173%" y="286.50"></text></g><g><title>apply_series_generator (pandas/core/apply.py:1081) (16 samples, 0.54%)</title><rect x="0.2677%" y="292" width="0.5355%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="16"/><text x="0.5177%" y="302.50"></text></g><g><title>get_time_step_demand (evaluation.py:171) (6 samples, 0.20%)</title><rect x="0.8367%" y="212" width="0.2008%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="6"/><text x="1.0867%" y="222.50"></text></g><g><title>new_method (pandas/core/ops/common.py:76) (3 samples, 0.10%)</title><rect x="0.9371%" y="228" width="0.1004%" height="15" fill="rgb(240,193,28)" fg:x="28" fg:w="3"/><text x="1.1871%" y="238.50"></text></g><g><title>__eq__ (pandas/core/arraylike.py:40) (3 samples, 0.10%)</title><rect x="0.9371%" y="244" width="0.1004%" height="15" fill="rgb(216,20,37)" fg:x="28" fg:w="3"/><text x="1.1871%" y="254.50"></text></g><g><title>_cmp_method (pandas/core/series.py:6121) (3 samples, 0.10%)</title><rect x="0.9371%" y="260" width="0.1004%" height="15" fill="rgb(206,188,39)" fg:x="28" fg:w="3"/><text x="1.1871%" y="270.50"></text></g><g><title>_construct_result (pandas/core/series.py:6231) (3 samples, 0.10%)</title><rect x="0.9371%" y="276" width="0.1004%" height="15" fill="rgb(217,207,13)" fg:x="28" fg:w="3"/><text x="1.1871%" y="286.50"></text></g><g><title>get_evaluation (evaluation.py:360) (10 samples, 0.33%)</title><rect x="0.8367%" y="196" width="0.3347%" height="15" fill="rgb(231,73,38)" fg:x="25" fg:w="10"/><text x="1.0867%" y="206.50"></text></g><g><title>get_time_step_demand (evaluation.py:173) (3 samples, 0.10%)</title><rect x="1.0710%" y="212" width="0.1004%" height="15" fill="rgb(225,20,46)" fg:x="32" fg:w="3"/><text x="1.3210%" y="222.50"></text></g><g><title>drop (pandas/core/frame.py:5581) (3 samples, 0.10%)</title><rect x="1.0710%" y="228" width="0.1004%" height="15" fill="rgb(210,31,41)" fg:x="32" fg:w="3"/><text x="1.3210%" y="238.50"></text></g><g><title>drop (pandas/core/generic.py:4788) (3 samples, 0.10%)</title><rect x="1.0710%" y="244" width="0.1004%" height="15" fill="rgb(221,200,47)" fg:x="32" fg:w="3"/><text x="1.3210%" y="254.50"></text></g><g><title>get_evaluation (evaluation.py:363) (4 samples, 0.13%)</title><rect x="1.1714%" y="196" width="0.1339%" height="15" fill="rgb(226,26,5)" fg:x="35" fg:w="4"/><text x="1.4214%" y="206.50"></text></g><g><title>get_time_step_fleet (evaluation.py:181) (3 samples, 0.10%)</title><rect x="1.2048%" y="212" width="0.1004%" height="15" fill="rgb(249,33,26)" fg:x="36" fg:w="3"/><text x="1.4548%" y="222.50"></text></g><g><title>drop_duplicates (pandas/core/frame.py:6818) (3 samples, 0.10%)</title><rect x="1.2048%" y="228" width="0.1004%" height="15" fill="rgb(235,183,28)" fg:x="36" fg:w="3"/><text x="1.4548%" y="238.50"></text></g><g><title>duplicated (pandas/core/frame.py:6954) (3 samples, 0.10%)</title><rect x="1.2048%" y="244" width="0.1004%" height="15" fill="rgb(221,5,38)" fg:x="36" fg:w="3"/><text x="1.4548%" y="254.50"></text></g><g><title>duplicated (pandas/core/series.py:2605) (3 samples, 0.10%)</title><rect x="1.2048%" y="260" width="0.1004%" height="15" fill="rgb(247,18,42)" fg:x="36" fg:w="3"/><text x="1.4548%" y="270.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:4108) (7 samples, 0.23%)</title><rect x="1.4056%" y="228" width="0.2343%" height="15" fill="rgb(241,131,45)" fg:x="42" fg:w="7"/><text x="1.6556%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/groupby/generic.py:1951) (3 samples, 0.10%)</title><rect x="1.6734%" y="228" width="0.1004%" height="15" fill="rgb(249,31,29)" fg:x="50" fg:w="3"/><text x="1.9234%" y="238.50"></text></g><g><title>update_fleet (evaluation.py:303) (16 samples, 0.54%)</title><rect x="1.3722%" y="212" width="0.5355%" height="15" fill="rgb(225,111,53)" fg:x="41" fg:w="16"/><text x="1.6222%" y="222.50"></text></g><g><title>apply (pandas/core/groupby/generic.py:230) (4 samples, 0.13%)</title><rect x="1.7738%" y="228" width="0.1339%" height="15" fill="rgb(238,160,17)" fg:x="53" fg:w="4"/><text x="2.0238%" y="238.50"></text></g><g><title>apply (pandas/core/groupby/groupby.py:1824) (4 samples, 0.13%)</title><rect x="1.7738%" y="244" width="0.1339%" height="15" fill="rgb(214,148,48)" fg:x="53" fg:w="4"/><text x="2.0238%" y="254.50"></text></g><g><title>_python_apply_general (pandas/core/groupby/groupby.py:1885) (4 samples, 0.13%)</title><rect x="1.7738%" y="260" width="0.1339%" height="15" fill="rgb(232,36,49)" fg:x="53" fg:w="4"/><text x="2.0238%" y="270.50"></text></g><g><title>_maybe_reindex_columns_na_proxy (pandas/core/internals/concat.py:220) (3 samples, 0.10%)</title><rect x="2.0415%" y="276" width="0.1004%" height="15" fill="rgb(209,103,24)" fg:x="61" fg:w="3"/><text x="2.2915%" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:680) (3 samples, 0.10%)</title><rect x="2.0415%" y="292" width="0.1004%" height="15" fill="rgb(229,88,8)" fg:x="61" fg:w="3"/><text x="2.2915%" y="302.50"></text></g><g><title>concatenate_managers (pandas/core/internals/concat.py:149) (4 samples, 0.13%)</title><rect x="2.0415%" y="260" width="0.1339%" height="15" fill="rgb(213,181,19)" fg:x="61" fg:w="4"/><text x="2.2915%" y="270.50"></text></g><g><title>concatenate_managers (pandas/core/internals/concat.py:166) (3 samples, 0.10%)</title><rect x="2.2423%" y="260" width="0.1004%" height="15" fill="rgb(254,191,54)" fg:x="67" fg:w="3"/><text x="2.4923%" y="270.50"></text></g><g><title>concatenate_managers (pandas/core/internals/concat.py:177) (3 samples, 0.10%)</title><rect x="2.3427%" y="260" width="0.1004%" height="15" fill="rgb(241,83,37)" fg:x="70" fg:w="3"/><text x="2.5927%" y="270.50"></text></g><g><title>update_fleet (evaluation.py:306) (17 samples, 0.57%)</title><rect x="1.9076%" y="212" width="0.5689%" height="15" fill="rgb(233,36,39)" fg:x="57" fg:w="17"/><text x="2.1576%" y="222.50"></text></g><g><title>concat (pandas/core/reshape/concat.py:395) (15 samples, 0.50%)</title><rect x="1.9746%" y="228" width="0.5020%" height="15" fill="rgb(226,3,54)" fg:x="59" fg:w="15"/><text x="2.2246%" y="238.50"></text></g><g><title>get_result (pandas/core/reshape/concat.py:684) (13 samples, 0.44%)</title><rect x="2.0415%" y="244" width="0.4351%" height="15" fill="rgb(245,192,40)" fg:x="61" fg:w="13"/><text x="2.2915%" y="254.50"></text></g><g><title>update_check_lifespan (evaluation.py:328) (4 samples, 0.13%)</title><rect x="2.6774%" y="228" width="0.1339%" height="15" fill="rgb(238,167,29)" fg:x="80" fg:w="4"/><text x="2.9274%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/indexes/base.py:5404) (9 samples, 0.30%)</title><rect x="2.8112%" y="244" width="0.3012%" height="15" fill="rgb(232,182,51)" fg:x="84" fg:w="9"/><text x="3.0612%" y="254.50"></text></g><g><title>__getattr__ (pandas/core/generic.py:6296) (9 samples, 0.30%)</title><rect x="2.8112%" y="260" width="0.3012%" height="15" fill="rgb(231,60,39)" fg:x="84" fg:w="9"/><text x="3.0612%" y="270.50"></text></g><g><title>_can_hold_identifiers_and_holds_name (pandas/core/indexes/base.py:5452) (9 samples, 0.30%)</title><rect x="2.8112%" y="276" width="0.3012%" height="15" fill="rgb(208,69,12)" fg:x="84" fg:w="9"/><text x="3.0612%" y="286.50"></text></g><g><title>__contains__ (pandas/core/indexes/base.py:5360) (9 samples, 0.30%)</title><rect x="2.8112%" y="292" width="0.3012%" height="15" fill="rgb(235,93,37)" fg:x="84" fg:w="9"/><text x="3.0612%" y="302.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:4831) (3 samples, 0.10%)</title><rect x="3.1459%" y="276" width="0.1004%" height="15" fill="rgb(213,116,39)" fg:x="94" fg:w="3"/><text x="3.3959%" y="286.50"></text></g><g><title>get_evaluation (evaluation.py:371) (71 samples, 2.38%)</title><rect x="1.3052%" y="196" width="2.3762%" height="15" fill="rgb(222,207,29)" fg:x="39" fg:w="71"/><text x="1.5552%" y="206.50">ge..</text></g><g><title>update_fleet (evaluation.py:317) (36 samples, 1.20%)</title><rect x="2.4766%" y="212" width="1.2048%" height="15" fill="rgb(206,96,30)" fg:x="74" fg:w="36"/><text x="2.7266%" y="222.50"></text></g><g><title>update_check_lifespan (evaluation.py:329) (26 samples, 0.87%)</title><rect x="2.8112%" y="228" width="0.8701%" height="15" fill="rgb(218,138,4)" fg:x="84" fg:w="26"/><text x="3.0612%" y="238.50"></text></g><g><title>drop (pandas/core/frame.py:5581) (17 samples, 0.57%)</title><rect x="3.1124%" y="244" width="0.5689%" height="15" fill="rgb(250,191,14)" fg:x="93" fg:w="17"/><text x="3.3624%" y="254.50"></text></g><g><title>drop (pandas/core/generic.py:4788) (17 samples, 0.57%)</title><rect x="3.1124%" y="260" width="0.5689%" height="15" fill="rgb(239,60,40)" fg:x="93" fg:w="17"/><text x="3.3624%" y="270.50"></text></g><g><title>_drop_axis (pandas/core/generic.py:4869) (13 samples, 0.44%)</title><rect x="3.2463%" y="276" width="0.4351%" height="15" fill="rgb(206,27,48)" fg:x="97" fg:w="13"/><text x="3.4963%" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:687) (13 samples, 0.44%)</title><rect x="3.2463%" y="292" width="0.4351%" height="15" fill="rgb(225,35,8)" fg:x="97" fg:w="13"/><text x="3.4963%" y="302.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:688) (13 samples, 0.44%)</title><rect x="3.2463%" y="308" width="0.4351%" height="15" fill="rgb(250,213,24)" fg:x="97" fg:w="13"/><text x="3.4963%" y="318.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:1307) (13 samples, 0.44%)</title><rect x="3.2463%" y="324" width="0.4351%" height="15" fill="rgb(247,123,22)" fg:x="97" fg:w="13"/><text x="3.4963%" y="334.50"></text></g><g><title>take_nd (pandas/core/array_algos/take.py:117) (13 samples, 0.44%)</title><rect x="3.2463%" y="340" width="0.4351%" height="15" fill="rgb(231,138,38)" fg:x="97" fg:w="13"/><text x="3.4963%" y="350.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:162) (9 samples, 0.30%)</title><rect x="3.3802%" y="356" width="0.3012%" height="15" fill="rgb(231,145,46)" fg:x="101" fg:w="9"/><text x="3.6302%" y="366.50"></text></g><g><title>factorize_array (pandas/core/algorithms.py:595) (4 samples, 0.13%)</title><rect x="3.7149%" y="452" width="0.1339%" height="15" fill="rgb(251,118,11)" fg:x="111" fg:w="4"/><text x="3.9649%" y="462.50"></text></g><g><title>factorize (pandas/core/algorithms.py:795) (6 samples, 0.20%)</title><rect x="3.6814%" y="436" width="0.2008%" height="15" fill="rgb(217,147,25)" fg:x="110" fg:w="6"/><text x="3.9314%" y="446.50"></text></g><g><title>codes (pandas/core/groupby/ops.py:690) (7 samples, 0.23%)</title><rect x="3.6814%" y="372" width="0.2343%" height="15" fill="rgb(247,81,37)" fg:x="110" fg:w="7"/><text x="3.9314%" y="382.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/groupby/ops.py:690) (7 samples, 0.23%)</title><rect x="3.6814%" y="388" width="0.2343%" height="15" fill="rgb(209,12,38)" fg:x="110" fg:w="7"/><text x="3.9314%" y="398.50"></text></g><g><title>codes (pandas/core/groupby/grouper.py:691) (7 samples, 0.23%)</title><rect x="3.6814%" y="404" width="0.2343%" height="15" fill="rgb(227,1,9)" fg:x="110" fg:w="7"/><text x="3.9314%" y="414.50"></text></g><g><title>_codes_and_uniques (pandas/core/groupby/grouper.py:835) (7 samples, 0.23%)</title><rect x="3.6814%" y="420" width="0.2343%" height="15" fill="rgb(248,47,43)" fg:x="110" fg:w="7"/><text x="3.9314%" y="430.50"></text></g><g><title>sum (pandas/core/groupby/groupby.py:3146) (8 samples, 0.27%)</title><rect x="3.6814%" y="228" width="0.2677%" height="15" fill="rgb(221,10,30)" fg:x="110" fg:w="8"/><text x="3.9314%" y="238.50"></text></g><g><title>_agg_general (pandas/core/groupby/groupby.py:1906) (8 samples, 0.27%)</title><rect x="3.6814%" y="244" width="0.2677%" height="15" fill="rgb(210,229,1)" fg:x="110" fg:w="8"/><text x="3.9314%" y="254.50"></text></g><g><title>_cython_agg_general (pandas/core/groupby/groupby.py:1998) (8 samples, 0.27%)</title><rect x="3.6814%" y="260" width="0.2677%" height="15" fill="rgb(222,148,37)" fg:x="110" fg:w="8"/><text x="3.9314%" y="270.50"></text></g><g><title>grouped_reduce (pandas/core/internals/base.py:367) (8 samples, 0.27%)</title><rect x="3.6814%" y="276" width="0.2677%" height="15" fill="rgb(234,67,33)" fg:x="110" fg:w="8"/><text x="3.9314%" y="286.50"></text></g><g><title>array_func (pandas/core/groupby/groupby.py:1973) (8 samples, 0.27%)</title><rect x="3.6814%" y="292" width="0.2677%" height="15" fill="rgb(247,98,35)" fg:x="110" fg:w="8"/><text x="3.9314%" y="302.50"></text></g><g><title>_cython_operation (pandas/core/groupby/ops.py:827) (8 samples, 0.27%)</title><rect x="3.6814%" y="308" width="0.2677%" height="15" fill="rgb(247,138,52)" fg:x="110" fg:w="8"/><text x="3.9314%" y="318.50"></text></g><g><title>has_dropped_na (pandas/core/groupby/ops.py:741) (8 samples, 0.27%)</title><rect x="3.6814%" y="324" width="0.2677%" height="15" fill="rgb(213,79,30)" fg:x="110" fg:w="8"/><text x="3.9314%" y="334.50"></text></g><g><title>group_info (pandas/core/groupby/ops.py:745) (8 samples, 0.27%)</title><rect x="3.6814%" y="340" width="0.2677%" height="15" fill="rgb(246,177,23)" fg:x="110" fg:w="8"/><text x="3.9314%" y="350.50"></text></g><g><title>_get_compressed_codes (pandas/core/groupby/ops.py:764) (8 samples, 0.27%)</title><rect x="3.6814%" y="356" width="0.2677%" height="15" fill="rgb(230,62,27)" fg:x="110" fg:w="8"/><text x="3.9314%" y="366.50"></text></g><g><title>get_capacity_by_server_generation_latency_sensitivity (evaluation.py:193) (10 samples, 0.33%)</title><rect x="3.6814%" y="212" width="0.3347%" height="15" fill="rgb(216,154,8)" fg:x="110" fg:w="10"/><text x="3.9314%" y="222.50"></text></g><g><title>rvs (scipy/stats/_distn_infrastructure.py:1051) (5 samples, 0.17%)</title><rect x="4.2838%" y="372" width="0.1673%" height="15" fill="rgb(244,35,45)" fg:x="128" fg:w="5"/><text x="4.5338%" y="382.50"></text></g><g><title>all (numpy/core/fromnumeric.py:2504) (4 samples, 0.13%)</title><rect x="4.3173%" y="388" width="0.1339%" height="15" fill="rgb(251,115,12)" fg:x="129" fg:w="4"/><text x="4.5673%" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:86) (3 samples, 0.10%)</title><rect x="4.3507%" y="404" width="0.1004%" height="15" fill="rgb(240,54,50)" fg:x="130" fg:w="3"/><text x="4.6007%" y="414.50"></text></g><g><title>map_array (pandas/core/algorithms.py:1745) (10 samples, 0.33%)</title><rect x="4.1834%" y="340" width="0.3347%" height="15" fill="rgb(233,84,52)" fg:x="125" fg:w="10"/><text x="4.4334%" y="350.50"></text></g><g><title>adjust_capacity_by_failure_rate (evaluation.py:208) (8 samples, 0.27%)</title><rect x="4.2503%" y="356" width="0.2677%" height="15" fill="rgb(207,117,47)" fg:x="127" fg:w="8"/><text x="4.5003%" y="366.50"></text></g><g><title>apply_standard (pandas/core/apply.py:1063) (14 samples, 0.47%)</title><rect x="4.0830%" y="276" width="0.4685%" height="15" fill="rgb(249,43,39)" fg:x="122" fg:w="14"/><text x="4.3330%" y="286.50"></text></g><g><title>apply_series_generator (pandas/core/apply.py:1081) (13 samples, 0.44%)</title><rect x="4.1165%" y="292" width="0.4351%" height="15" fill="rgb(209,38,44)" fg:x="123" fg:w="13"/><text x="4.3665%" y="302.50"></text></g><g><title>infer (pandas/core/frame.py:10466) (12 samples, 0.40%)</title><rect x="4.1499%" y="308" width="0.4016%" height="15" fill="rgb(236,212,23)" fg:x="124" fg:w="12"/><text x="4.3999%" y="318.50"></text></g><g><title>_map_values (pandas/core/base.py:921) (11 samples, 0.37%)</title><rect x="4.1834%" y="324" width="0.3681%" height="15" fill="rgb(242,79,21)" fg:x="125" fg:w="11"/><text x="4.4334%" y="334.50"></text></g><g><title>get_evaluation (evaluation.py:376) (29 samples, 0.97%)</title><rect x="3.6814%" y="196" width="0.9705%" height="15" fill="rgb(211,96,35)" fg:x="110" fg:w="29"/><text x="3.9314%" y="206.50"></text></g><g><title>get_capacity_by_server_generation_latency_sensitivity (evaluation.py:196) (17 samples, 0.57%)</title><rect x="4.0830%" y="212" width="0.5689%" height="15" fill="rgb(253,215,40)" fg:x="122" fg:w="17"/><text x="4.3330%" y="222.50"></text></g><g><title>map (pandas/core/frame.py:10468) (17 samples, 0.57%)</title><rect x="4.0830%" y="228" width="0.5689%" height="15" fill="rgb(211,81,21)" fg:x="122" fg:w="17"/><text x="4.3330%" y="238.50"></text></g><g><title>apply (pandas/core/frame.py:10374) (17 samples, 0.57%)</title><rect x="4.0830%" y="244" width="0.5689%" height="15" fill="rgb(208,190,38)" fg:x="122" fg:w="17"/><text x="4.3330%" y="254.50"></text></g><g><title>apply (pandas/core/apply.py:916) (17 samples, 0.57%)</title><rect x="4.0830%" y="260" width="0.5689%" height="15" fill="rgb(235,213,38)" fg:x="122" fg:w="17"/><text x="4.3330%" y="270.50"></text></g><g><title>apply_standard (pandas/core/apply.py:1068) (3 samples, 0.10%)</title><rect x="4.5515%" y="276" width="0.1004%" height="15" fill="rgb(237,122,38)" fg:x="136" fg:w="3"/><text x="4.8015%" y="286.50"></text></g><g><title>wrap_results (pandas/core/apply.py:1107) (3 samples, 0.10%)</title><rect x="4.5515%" y="292" width="0.1004%" height="15" fill="rgb(244,218,35)" fg:x="136" fg:w="3"/><text x="4.8015%" y="302.50"></text></g><g><title>wrap_results_for_axis (pandas/core/apply.py:1219) (3 samples, 0.10%)</title><rect x="4.5515%" y="308" width="0.1004%" height="15" fill="rgb(240,68,47)" fg:x="136" fg:w="3"/><text x="4.8015%" y="318.50"></text></g><g><title>__init__ (pandas/core/frame.py:778) (3 samples, 0.10%)</title><rect x="4.5515%" y="324" width="0.1004%" height="15" fill="rgb(210,16,53)" fg:x="136" fg:w="3"/><text x="4.8015%" y="334.50"></text></g><g><title>mean (pandas/core/groupby/groupby.py:2452) (3 samples, 0.10%)</title><rect x="4.7523%" y="340" width="0.1004%" height="15" fill="rgb(235,124,12)" fg:x="142" fg:w="3"/><text x="5.0023%" y="350.50"></text></g><g><title>_cython_operation (pandas/core/groupby/ops.py:827) (5 samples, 0.17%)</title><rect x="4.8527%" y="420" width="0.1673%" height="15" fill="rgb(224,169,11)" fg:x="145" fg:w="5"/><text x="5.1027%" y="430.50"></text></g><g><title>has_dropped_na (pandas/core/groupby/ops.py:741) (5 samples, 0.17%)</title><rect x="4.8527%" y="436" width="0.1673%" height="15" fill="rgb(250,166,2)" fg:x="145" fg:w="5"/><text x="5.1027%" y="446.50"></text></g><g><title>group_info (pandas/core/groupby/ops.py:745) (5 samples, 0.17%)</title><rect x="4.8527%" y="452" width="0.1673%" height="15" fill="rgb(242,216,29)" fg:x="145" fg:w="5"/><text x="5.1027%" y="462.50"></text></g><g><title>_get_compressed_codes (pandas/core/groupby/ops.py:769) (5 samples, 0.17%)</title><rect x="4.8527%" y="468" width="0.1673%" height="15" fill="rgb(230,116,27)" fg:x="145" fg:w="5"/><text x="5.1027%" y="478.50"></text></g><g><title>codes (pandas/core/groupby/grouper.py:691) (4 samples, 0.13%)</title><rect x="4.8862%" y="484" width="0.1339%" height="15" fill="rgb(228,99,48)" fg:x="146" fg:w="4"/><text x="5.1362%" y="494.50"></text></g><g><title>_codes_and_uniques (pandas/core/groupby/grouper.py:835) (4 samples, 0.13%)</title><rect x="4.8862%" y="500" width="0.1339%" height="15" fill="rgb(253,11,6)" fg:x="146" fg:w="4"/><text x="5.1362%" y="510.50"></text></g><g><title>factorize (pandas/core/algorithms.py:795) (4 samples, 0.13%)</title><rect x="4.8862%" y="516" width="0.1339%" height="15" fill="rgb(247,143,39)" fg:x="146" fg:w="4"/><text x="5.1362%" y="526.50"></text></g><g><title>agg_or_apply_dict_like (pandas/core/apply.py:1608) (12 samples, 0.40%)</title><rect x="4.6519%" y="276" width="0.4016%" height="15" fill="rgb(236,97,10)" fg:x="139" fg:w="12"/><text x="4.9019%" y="286.50"></text></g><g><title>compute_dict_like (pandas/core/apply.py:496) (10 samples, 0.33%)</title><rect x="4.7189%" y="292" width="0.3347%" height="15" fill="rgb(233,208,19)" fg:x="141" fg:w="10"/><text x="4.9689%" y="302.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/apply.py:497) (10 samples, 0.33%)</title><rect x="4.7189%" y="308" width="0.3347%" height="15" fill="rgb(216,164,2)" fg:x="141" fg:w="10"/><text x="4.9689%" y="318.50"></text></g><g><title>aggregate (pandas/core/groupby/generic.py:249) (10 samples, 0.33%)</title><rect x="4.7189%" y="324" width="0.3347%" height="15" fill="rgb(220,129,5)" fg:x="141" fg:w="10"/><text x="4.9689%" y="334.50"></text></g><g><title>sum (pandas/core/groupby/groupby.py:3146) (6 samples, 0.20%)</title><rect x="4.8527%" y="340" width="0.2008%" height="15" fill="rgb(242,17,10)" fg:x="145" fg:w="6"/><text x="5.1027%" y="350.50"></text></g><g><title>_agg_general (pandas/core/groupby/groupby.py:1906) (6 samples, 0.20%)</title><rect x="4.8527%" y="356" width="0.2008%" height="15" fill="rgb(242,107,0)" fg:x="145" fg:w="6"/><text x="5.1027%" y="366.50"></text></g><g><title>_cython_agg_general (pandas/core/groupby/groupby.py:1998) (6 samples, 0.20%)</title><rect x="4.8527%" y="372" width="0.2008%" height="15" fill="rgb(251,28,31)" fg:x="145" fg:w="6"/><text x="5.1027%" y="382.50"></text></g><g><title>grouped_reduce (pandas/core/internals/base.py:367) (6 samples, 0.20%)</title><rect x="4.8527%" y="388" width="0.2008%" height="15" fill="rgb(233,223,10)" fg:x="145" fg:w="6"/><text x="5.1027%" y="398.50"></text></g><g><title>array_func (pandas/core/groupby/groupby.py:1973) (6 samples, 0.20%)</title><rect x="4.8527%" y="404" width="0.2008%" height="15" fill="rgb(215,21,27)" fg:x="145" fg:w="6"/><text x="5.1027%" y="414.50"></text></g><g><title>aggregate (pandas/core/groupby/generic.py:1432) (17 samples, 0.57%)</title><rect x="4.6519%" y="228" width="0.5689%" height="15" fill="rgb(232,23,21)" fg:x="139" fg:w="17"/><text x="4.9019%" y="238.50"></text></g><g><title>agg (pandas/core/apply.py:190) (17 samples, 0.57%)</title><rect x="4.6519%" y="244" width="0.5689%" height="15" fill="rgb(244,5,23)" fg:x="139" fg:w="17"/><text x="4.9019%" y="254.50"></text></g><g><title>agg_dict_like (pandas/core/apply.py:423) (17 samples, 0.57%)</title><rect x="4.6519%" y="260" width="0.5689%" height="15" fill="rgb(226,81,46)" fg:x="139" fg:w="17"/><text x="4.9019%" y="270.50"></text></g><g><title>agg_or_apply_dict_like (pandas/core/apply.py:1611) (5 samples, 0.17%)</title><rect x="5.0535%" y="276" width="0.1673%" height="15" fill="rgb(247,70,30)" fg:x="151" fg:w="5"/><text x="5.3035%" y="286.50"></text></g><g><title>wrap_results_dict_like (pandas/core/apply.py:531) (5 samples, 0.17%)</title><rect x="5.0535%" y="292" width="0.1673%" height="15" fill="rgb(212,68,19)" fg:x="151" fg:w="5"/><text x="5.3035%" y="302.50"></text></g><g><title>concat (pandas/core/reshape/concat.py:395) (3 samples, 0.10%)</title><rect x="5.1205%" y="308" width="0.1004%" height="15" fill="rgb(240,187,13)" fg:x="153" fg:w="3"/><text x="5.3705%" y="318.50"></text></g><g><title>check_datacenter_slots_size_constraint (evaluation.py:213) (18 samples, 0.60%)</title><rect x="4.6519%" y="212" width="0.6024%" height="15" fill="rgb(223,113,26)" fg:x="139" fg:w="18"/><text x="4.9019%" y="222.50"></text></g><g><title>get_evaluation (evaluation.py:379) (19 samples, 0.64%)</title><rect x="4.6519%" y="196" width="0.6359%" height="15" fill="rgb(206,192,2)" fg:x="139" fg:w="19"/><text x="4.9019%" y="206.50"></text></g><g><title>get_utilization (evaluation.py:228) (3 samples, 0.10%)</title><rect x="5.2878%" y="212" width="0.1004%" height="15" fill="rgb(241,108,4)" fg:x="158" fg:w="3"/><text x="5.5378%" y="222.50"></text></g><g><title>get_evaluation (evaluation.py:382) (6 samples, 0.20%)</title><rect x="5.2878%" y="196" width="0.2008%" height="15" fill="rgb(247,173,49)" fg:x="158" fg:w="6"/><text x="5.5378%" y="206.50"></text></g><g><title>get_utilization (evaluation.py:229) (3 samples, 0.10%)</title><rect x="5.3882%" y="212" width="0.1004%" height="15" fill="rgb(224,114,35)" fg:x="161" fg:w="3"/><text x="5.6382%" y="222.50"></text></g><g><title>get_evaluation (evaluation.py:384) (5 samples, 0.17%)</title><rect x="5.4886%" y="196" width="0.1673%" height="15" fill="rgb(245,159,27)" fg:x="164" fg:w="5"/><text x="5.7386%" y="206.50"></text></g><g><title>get_normalized_lifespan (evaluation.py:246) (5 samples, 0.17%)</title><rect x="5.4886%" y="212" width="0.1673%" height="15" fill="rgb(245,172,44)" fg:x="164" fg:w="5"/><text x="5.7386%" y="222.50"></text></g><g><title>get_profit (evaluation.py:251) (4 samples, 0.13%)</title><rect x="5.6560%" y="212" width="0.1339%" height="15" fill="rgb(236,23,11)" fg:x="169" fg:w="4"/><text x="5.9060%" y="222.50"></text></g><g><title>_interleave (pandas/core/internals/managers.py:1727) (7 samples, 0.23%)</title><rect x="6.1914%" y="372" width="0.2343%" height="15" fill="rgb(205,117,38)" fg:x="185" fg:w="7"/><text x="6.4414%" y="382.50"></text></g><g><title>_interleave (pandas/core/internals/managers.py:1735) (19 samples, 0.64%)</title><rect x="6.4257%" y="372" width="0.6359%" height="15" fill="rgb(237,72,25)" fg:x="192" fg:w="19"/><text x="6.6757%" y="382.50"></text></g><g><title>get_values (pandas/core/internals/blocks.py:2588) (15 samples, 0.50%)</title><rect x="6.5596%" y="388" width="0.5020%" height="15" fill="rgb(244,70,9)" fg:x="196" fg:w="15"/><text x="6.8096%" y="398.50"></text></g><g><title>_interleave (pandas/core/internals/managers.py:1736) (10 samples, 0.33%)</title><rect x="7.0616%" y="372" width="0.3347%" height="15" fill="rgb(217,125,39)" fg:x="211" fg:w="10"/><text x="7.3116%" y="382.50"></text></g><g><title>series_generator (pandas/core/apply.py:1249) (38 samples, 1.27%)</title><rect x="6.1914%" y="308" width="1.2718%" height="15" fill="rgb(235,36,10)" fg:x="185" fg:w="38"/><text x="6.4414%" y="318.50"></text></g><g><title>values (pandas/core/apply.py:862) (38 samples, 1.27%)</title><rect x="6.1914%" y="324" width="1.2718%" height="15" fill="rgb(251,123,47)" fg:x="185" fg:w="38"/><text x="6.4414%" y="334.50"></text></g><g><title>values (pandas/core/frame.py:12664) (38 samples, 1.27%)</title><rect x="6.1914%" y="340" width="1.2718%" height="15" fill="rgb(221,13,13)" fg:x="185" fg:w="38"/><text x="6.4414%" y="350.50"></text></g><g><title>as_array (pandas/core/internals/managers.py:1694) (38 samples, 1.27%)</title><rect x="6.1914%" y="356" width="1.2718%" height="15" fill="rgb(238,131,9)" fg:x="185" fg:w="38"/><text x="6.4414%" y="366.50"></text></g><g><title>series_generator (pandas/core/apply.py:1268) (12 samples, 0.40%)</title><rect x="7.4967%" y="308" width="0.4016%" height="15" fill="rgb(211,50,8)" fg:x="224" fg:w="12"/><text x="7.7467%" y="318.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:6301) (4 samples, 0.13%)</title><rect x="8.0656%" y="324" width="0.1339%" height="15" fill="rgb(245,182,24)" fg:x="241" fg:w="4"/><text x="8.3156%" y="334.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:6312) (17 samples, 0.57%)</title><rect x="8.1995%" y="324" width="0.5689%" height="15" fill="rgb(242,14,37)" fg:x="245" fg:w="17"/><text x="8.4495%" y="334.50"></text></g><g><title>series_generator (pandas/core/apply.py:1270) (40 samples, 1.34%)</title><rect x="7.8983%" y="308" width="1.3387%" height="15" fill="rgb(246,228,12)" fg:x="236" fg:w="40"/><text x="8.1483%" y="318.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:6313) (14 samples, 0.47%)</title><rect x="8.7684%" y="324" width="0.4685%" height="15" fill="rgb(213,55,15)" fg:x="262" fg:w="14"/><text x="9.0184%" y="334.50"></text></g><g><title>set_values (pandas/core/internals/managers.py:2065) (8 samples, 0.27%)</title><rect x="9.5382%" y="324" width="0.2677%" height="15" fill="rgb(209,9,3)" fg:x="285" fg:w="8"/><text x="9.7882%" y="334.50"></text></g><g><title>set_values (pandas/core/internals/managers.py:2075) (10 samples, 0.33%)</title><rect x="9.8059%" y="324" width="0.3347%" height="15" fill="rgb(230,59,30)" fg:x="293" fg:w="10"/><text x="10.0559%" y="334.50"></text></g><g><title>series_generator (pandas/core/apply.py:1271) (76 samples, 2.54%)</title><rect x="9.2369%" y="308" width="2.5435%" height="15" fill="rgb(209,121,21)" fg:x="276" fg:w="76"/><text x="9.4869%" y="318.50">se..</text></g><g><title>set_values (pandas/core/internals/managers.py:2076) (49 samples, 1.64%)</title><rect x="10.1406%" y="324" width="1.6399%" height="15" fill="rgb(220,109,13)" fg:x="303" fg:w="49"/><text x="10.3906%" y="334.50"></text></g><g><title>series_generator (pandas/core/apply.py:1272) (17 samples, 0.57%)</title><rect x="11.7805%" y="308" width="0.5689%" height="15" fill="rgb(232,18,1)" fg:x="352" fg:w="17"/><text x="12.0305%" y="318.50"></text></g><g><title>series_generator (pandas/core/apply.py:1280) (21 samples, 0.70%)</title><rect x="12.3829%" y="308" width="0.7028%" height="15" fill="rgb(215,41,42)" fg:x="370" fg:w="21"/><text x="12.6329%" y="318.50"></text></g><g><title>apply_series_generator (pandas/core/apply.py:1079) (240 samples, 8.03%)</title><rect x="6.0241%" y="292" width="8.0321%" height="15" fill="rgb(224,123,36)" fg:x="180" fg:w="240"/><text x="6.2741%" y="302.50">apply_serie..</text></g><g><title>series_generator (pandas/core/apply.py:1281) (29 samples, 0.97%)</title><rect x="13.0857%" y="308" width="0.9705%" height="15" fill="rgb(240,125,3)" fg:x="391" fg:w="29"/><text x="13.3357%" y="318.50"></text></g><g><title>calculate_server_cost (evaluation.py:276) (5 samples, 0.17%)</title><rect x="14.9933%" y="308" width="0.1673%" height="15" fill="rgb(205,98,50)" fg:x="448" fg:w="5"/><text x="15.2433%" y="318.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1095) (9 samples, 0.30%)</title><rect x="15.5622%" y="324" width="0.3012%" height="15" fill="rgb(205,185,37)" fg:x="465" fg:w="9"/><text x="15.8122%" y="334.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2765) (5 samples, 0.17%)</title><rect x="16.2316%" y="340" width="0.1673%" height="15" fill="rgb(238,207,15)" fg:x="485" fg:w="5"/><text x="16.4816%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2770) (11 samples, 0.37%)</title><rect x="16.3989%" y="340" width="0.3681%" height="15" fill="rgb(213,199,42)" fg:x="490" fg:w="11"/><text x="16.6489%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2771) (8 samples, 0.27%)</title><rect x="16.7671%" y="340" width="0.2677%" height="15" fill="rgb(235,201,11)" fg:x="501" fg:w="8"/><text x="17.0171%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2779) (10 samples, 0.33%)</title><rect x="17.0348%" y="340" width="0.3347%" height="15" fill="rgb(207,46,11)" fg:x="509" fg:w="10"/><text x="17.2848%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2780) (18 samples, 0.60%)</title><rect x="17.3695%" y="340" width="0.6024%" height="15" fill="rgb(241,35,35)" fg:x="519" fg:w="18"/><text x="17.6195%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1096) (80 samples, 2.68%)</title><rect x="15.8635%" y="324" width="2.6774%" height="15" fill="rgb(243,32,47)" fg:x="474" fg:w="80"/><text x="16.1135%" y="334.50">__..</text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2783) (17 samples, 0.57%)</title><rect x="17.9719%" y="340" width="0.5689%" height="15" fill="rgb(247,202,23)" fg:x="537" fg:w="17"/><text x="18.2219%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:372) (4 samples, 0.13%)</title><rect x="18.9424%" y="340" width="0.1339%" height="15" fill="rgb(219,102,11)" fg:x="566" fg:w="4"/><text x="19.1924%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:383) (10 samples, 0.33%)</title><rect x="19.0763%" y="340" width="0.3347%" height="15" fill="rgb(243,110,44)" fg:x="570" fg:w="10"/><text x="19.3263%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1097) (31 samples, 1.04%)</title><rect x="18.5408%" y="324" width="1.0375%" height="15" fill="rgb(222,74,54)" fg:x="554" fg:w="31"/><text x="18.7908%" y="334.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:386) (5 samples, 0.17%)</title><rect x="19.4110%" y="340" width="0.1673%" height="15" fill="rgb(216,99,12)" fg:x="580" fg:w="5"/><text x="19.6610%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1099) (4 samples, 0.13%)</title><rect x="19.5783%" y="324" width="0.1339%" height="15" fill="rgb(226,22,26)" fg:x="585" fg:w="4"/><text x="19.8283%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1104) (4 samples, 0.13%)</title><rect x="19.7122%" y="324" width="0.1339%" height="15" fill="rgb(217,163,10)" fg:x="589" fg:w="4"/><text x="19.9622%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1105) (17 samples, 0.57%)</title><rect x="19.8461%" y="324" width="0.5689%" height="15" fill="rgb(213,25,53)" fg:x="593" fg:w="17"/><text x="20.0961%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1108) (9 samples, 0.30%)</title><rect x="20.4150%" y="324" width="0.3012%" height="15" fill="rgb(252,105,26)" fg:x="610" fg:w="9"/><text x="20.6650%" y="334.50"></text></g><g><title>_get_value (pandas/core/series.py:1220) (6 samples, 0.20%)</title><rect x="21.1178%" y="340" width="0.2008%" height="15" fill="rgb(220,39,43)" fg:x="631" fg:w="6"/><text x="21.3678%" y="350.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3777) (5 samples, 0.17%)</title><rect x="21.8876%" y="356" width="0.1673%" height="15" fill="rgb(229,68,48)" fg:x="654" fg:w="5"/><text x="22.1376%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6672) (11 samples, 0.37%)</title><rect x="22.3896%" y="372" width="0.3681%" height="15" fill="rgb(252,8,32)" fg:x="669" fg:w="11"/><text x="22.6396%" y="382.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3803) (27 samples, 0.90%)</title><rect x="22.0549%" y="356" width="0.9036%" height="15" fill="rgb(223,20,43)" fg:x="659" fg:w="27"/><text x="22.3049%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6677) (6 samples, 0.20%)</title><rect x="22.7577%" y="372" width="0.2008%" height="15" fill="rgb(229,81,49)" fg:x="680" fg:w="6"/><text x="23.0077%" y="382.50"></text></g><g><title>_get_value (pandas/core/series.py:1237) (82 samples, 2.74%)</title><rect x="21.3521%" y="340" width="2.7443%" height="15" fill="rgb(236,28,36)" fg:x="638" fg:w="82"/><text x="21.6021%" y="350.50">_g..</text></g><g><title>get_loc (pandas/core/indexes/base.py:3805) (34 samples, 1.14%)</title><rect x="22.9585%" y="356" width="1.1379%" height="15" fill="rgb(249,185,26)" fg:x="686" fg:w="34"/><text x="23.2085%" y="366.50"></text></g><g><title>_values (pandas/core/series.py:831) (3 samples, 0.10%)</title><rect x="24.8996%" y="356" width="0.1004%" height="15" fill="rgb(249,174,33)" fg:x="744" fg:w="3"/><text x="25.1496%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2004) (9 samples, 0.30%)</title><rect x="25.6359%" y="372" width="0.3012%" height="15" fill="rgb(233,201,37)" fg:x="766" fg:w="9"/><text x="25.8859%" y="382.50"></text></g><g><title>calculate_server_cost (evaluation.py:278) (337 samples, 11.28%)</title><rect x="15.1941%" y="308" width="11.2784%" height="15" fill="rgb(221,78,26)" fg:x="454" fg:w="337"/><text x="15.4441%" y="318.50">calculate_server_..</text></g><g><title>__getitem__ (pandas/core/series.py:1121) (172 samples, 5.76%)</title><rect x="20.7162%" y="324" width="5.7564%" height="15" fill="rgb(250,127,30)" fg:x="619" fg:w="172"/><text x="20.9662%" y="334.50">__getit..</text></g><g><title>_get_value (pandas/core/series.py:1240) (70 samples, 2.34%)</title><rect x="24.1299%" y="340" width="2.3427%" height="15" fill="rgb(230,49,44)" fg:x="721" fg:w="70"/><text x="24.3799%" y="350.50">_..</text></g><g><title>_values (pandas/core/series.py:863) (44 samples, 1.47%)</title><rect x="25.0000%" y="356" width="1.4726%" height="15" fill="rgb(229,67,23)" fg:x="747" fg:w="44"/><text x="25.2500%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2006) (16 samples, 0.54%)</title><rect x="25.9371%" y="372" width="0.5355%" height="15" fill="rgb(249,83,47)" fg:x="775" fg:w="16"/><text x="26.1871%" y="382.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1095) (7 samples, 0.23%)</title><rect x="26.8407%" y="324" width="0.2343%" height="15" fill="rgb(215,43,3)" fg:x="802" fg:w="7"/><text x="27.0907%" y="334.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2765) (12 samples, 0.40%)</title><rect x="27.3762%" y="340" width="0.4016%" height="15" fill="rgb(238,154,13)" fg:x="818" fg:w="12"/><text x="27.6262%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2770) (17 samples, 0.57%)</title><rect x="27.8112%" y="340" width="0.5689%" height="15" fill="rgb(219,56,2)" fg:x="831" fg:w="17"/><text x="28.0612%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2771) (12 samples, 0.40%)</title><rect x="28.3802%" y="340" width="0.4016%" height="15" fill="rgb(233,0,4)" fg:x="848" fg:w="12"/><text x="28.6302%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2779) (9 samples, 0.30%)</title><rect x="28.8153%" y="340" width="0.3012%" height="15" fill="rgb(235,30,7)" fg:x="861" fg:w="9"/><text x="29.0653%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2780) (6 samples, 0.20%)</title><rect x="29.1165%" y="340" width="0.2008%" height="15" fill="rgb(250,79,13)" fg:x="870" fg:w="6"/><text x="29.3665%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1096) (74 samples, 2.48%)</title><rect x="27.0750%" y="324" width="2.4766%" height="15" fill="rgb(211,146,34)" fg:x="809" fg:w="74"/><text x="27.3250%" y="334.50">__..</text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2783) (7 samples, 0.23%)</title><rect x="29.3173%" y="340" width="0.2343%" height="15" fill="rgb(228,22,38)" fg:x="876" fg:w="7"/><text x="29.5673%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:372) (7 samples, 0.23%)</title><rect x="29.8862%" y="340" width="0.2343%" height="15" fill="rgb(235,168,5)" fg:x="893" fg:w="7"/><text x="30.1362%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:383) (15 samples, 0.50%)</title><rect x="30.1205%" y="340" width="0.5020%" height="15" fill="rgb(221,155,16)" fg:x="900" fg:w="15"/><text x="30.3705%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1097) (40 samples, 1.34%)</title><rect x="29.5515%" y="324" width="1.3387%" height="15" fill="rgb(215,215,53)" fg:x="883" fg:w="40"/><text x="29.8015%" y="334.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:386) (8 samples, 0.27%)</title><rect x="30.6225%" y="340" width="0.2677%" height="15" fill="rgb(223,4,10)" fg:x="915" fg:w="8"/><text x="30.8725%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1104) (4 samples, 0.13%)</title><rect x="30.9572%" y="324" width="0.1339%" height="15" fill="rgb(234,103,6)" fg:x="925" fg:w="4"/><text x="31.2072%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1105) (9 samples, 0.30%)</title><rect x="31.0910%" y="324" width="0.3012%" height="15" fill="rgb(227,97,0)" fg:x="929" fg:w="9"/><text x="31.3410%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1108) (3 samples, 0.10%)</title><rect x="31.3922%" y="324" width="0.1004%" height="15" fill="rgb(234,150,53)" fg:x="938" fg:w="3"/><text x="31.6422%" y="334.50"></text></g><g><title>_get_value (pandas/core/series.py:1220) (14 samples, 0.47%)</title><rect x="32.0950%" y="340" width="0.4685%" height="15" fill="rgb(228,201,54)" fg:x="959" fg:w="14"/><text x="32.3450%" y="350.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3777) (8 samples, 0.27%)</title><rect x="33.1325%" y="356" width="0.2677%" height="15" fill="rgb(222,22,37)" fg:x="990" fg:w="8"/><text x="33.3825%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6672) (6 samples, 0.20%)</title><rect x="33.7015%" y="372" width="0.2008%" height="15" fill="rgb(237,53,32)" fg:x="1007" fg:w="6"/><text x="33.9515%" y="382.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3803) (19 samples, 0.64%)</title><rect x="33.4003%" y="356" width="0.6359%" height="15" fill="rgb(233,25,53)" fg:x="998" fg:w="19"/><text x="33.6503%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6677) (4 samples, 0.13%)</title><rect x="33.9023%" y="372" width="0.1339%" height="15" fill="rgb(210,40,34)" fg:x="1013" fg:w="4"/><text x="34.1523%" y="382.50"></text></g><g><title>_get_value (pandas/core/series.py:1237) (83 samples, 2.78%)</title><rect x="32.5636%" y="340" width="2.7778%" height="15" fill="rgb(241,220,44)" fg:x="973" fg:w="83"/><text x="32.8136%" y="350.50">_g..</text></g><g><title>get_loc (pandas/core/indexes/base.py:3805) (39 samples, 1.31%)</title><rect x="34.0361%" y="356" width="1.3052%" height="15" fill="rgb(235,28,35)" fg:x="1017" fg:w="39"/><text x="34.2861%" y="366.50"></text></g><g><title>_values (pandas/core/series.py:831) (8 samples, 0.27%)</title><rect x="36.0107%" y="356" width="0.2677%" height="15" fill="rgb(210,56,17)" fg:x="1076" fg:w="8"/><text x="36.2607%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2004) (8 samples, 0.27%)</title><rect x="36.6466%" y="372" width="0.2677%" height="15" fill="rgb(224,130,29)" fg:x="1095" fg:w="8"/><text x="36.8966%" y="382.50"></text></g><g><title>calculate_server_cost (evaluation.py:279) (334 samples, 11.18%)</title><rect x="26.4726%" y="308" width="11.1780%" height="15" fill="rgb(235,212,8)" fg:x="791" fg:w="334"/><text x="26.7226%" y="318.50">calculate_server..</text></g><g><title>__getitem__ (pandas/core/series.py:1121) (183 samples, 6.12%)</title><rect x="31.5261%" y="324" width="6.1245%" height="15" fill="rgb(223,33,50)" fg:x="942" fg:w="183"/><text x="31.7761%" y="334.50">__getite..</text></g><g><title>_get_value (pandas/core/series.py:1240) (69 samples, 2.31%)</title><rect x="35.3414%" y="340" width="2.3092%" height="15" fill="rgb(219,149,13)" fg:x="1056" fg:w="69"/><text x="35.5914%" y="350.50">_..</text></g><g><title>_values (pandas/core/series.py:863) (41 samples, 1.37%)</title><rect x="36.2784%" y="356" width="1.3722%" height="15" fill="rgb(250,156,29)" fg:x="1084" fg:w="41"/><text x="36.5284%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2006) (22 samples, 0.74%)</title><rect x="36.9143%" y="372" width="0.7363%" height="15" fill="rgb(216,193,19)" fg:x="1103" fg:w="22"/><text x="37.1643%" y="382.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1095) (10 samples, 0.33%)</title><rect x="37.9183%" y="324" width="0.3347%" height="15" fill="rgb(216,135,14)" fg:x="1133" fg:w="10"/><text x="38.1683%" y="334.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2765) (10 samples, 0.33%)</title><rect x="38.3869%" y="340" width="0.3347%" height="15" fill="rgb(241,47,5)" fg:x="1147" fg:w="10"/><text x="38.6369%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2770) (14 samples, 0.47%)</title><rect x="38.7550%" y="340" width="0.4685%" height="15" fill="rgb(233,42,35)" fg:x="1158" fg:w="14"/><text x="39.0050%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2771) (14 samples, 0.47%)</title><rect x="39.2236%" y="340" width="0.4685%" height="15" fill="rgb(231,13,6)" fg:x="1172" fg:w="14"/><text x="39.4736%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2779) (8 samples, 0.27%)</title><rect x="39.6921%" y="340" width="0.2677%" height="15" fill="rgb(207,181,40)" fg:x="1186" fg:w="8"/><text x="39.9421%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2780) (14 samples, 0.47%)</title><rect x="39.9598%" y="340" width="0.4685%" height="15" fill="rgb(254,173,49)" fg:x="1194" fg:w="14"/><text x="40.2098%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1096) (76 samples, 2.54%)</title><rect x="38.2530%" y="324" width="2.5435%" height="15" fill="rgb(221,1,38)" fg:x="1143" fg:w="76"/><text x="38.5030%" y="334.50">__..</text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2783) (11 samples, 0.37%)</title><rect x="40.4284%" y="340" width="0.3681%" height="15" fill="rgb(206,124,46)" fg:x="1208" fg:w="11"/><text x="40.6784%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:372) (7 samples, 0.23%)</title><rect x="41.3655%" y="340" width="0.2343%" height="15" fill="rgb(249,21,11)" fg:x="1236" fg:w="7"/><text x="41.6155%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:383) (12 samples, 0.40%)</title><rect x="41.5997%" y="340" width="0.4016%" height="15" fill="rgb(222,201,40)" fg:x="1243" fg:w="12"/><text x="41.8497%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1097) (45 samples, 1.51%)</title><rect x="40.7965%" y="324" width="1.5060%" height="15" fill="rgb(235,61,29)" fg:x="1219" fg:w="45"/><text x="41.0465%" y="334.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:386) (9 samples, 0.30%)</title><rect x="42.0013%" y="340" width="0.3012%" height="15" fill="rgb(219,207,3)" fg:x="1255" fg:w="9"/><text x="42.2513%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1104) (7 samples, 0.23%)</title><rect x="42.3360%" y="324" width="0.2343%" height="15" fill="rgb(222,56,46)" fg:x="1265" fg:w="7"/><text x="42.5860%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1105) (30 samples, 1.00%)</title><rect x="42.5703%" y="324" width="1.0040%" height="15" fill="rgb(239,76,54)" fg:x="1272" fg:w="30"/><text x="42.8203%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1108) (5 samples, 0.17%)</title><rect x="43.5743%" y="324" width="0.1673%" height="15" fill="rgb(231,124,27)" fg:x="1302" fg:w="5"/><text x="43.8243%" y="334.50"></text></g><g><title>_get_value (pandas/core/series.py:1220) (6 samples, 0.20%)</title><rect x="44.5448%" y="340" width="0.2008%" height="15" fill="rgb(249,195,6)" fg:x="1331" fg:w="6"/><text x="44.7948%" y="350.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3777) (4 samples, 0.13%)</title><rect x="45.2811%" y="356" width="0.1339%" height="15" fill="rgb(237,174,47)" fg:x="1353" fg:w="4"/><text x="45.5311%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6672) (8 samples, 0.27%)</title><rect x="45.4819%" y="372" width="0.2677%" height="15" fill="rgb(206,201,31)" fg:x="1359" fg:w="8"/><text x="45.7319%" y="382.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3803) (18 samples, 0.60%)</title><rect x="45.4150%" y="356" width="0.6024%" height="15" fill="rgb(231,57,52)" fg:x="1357" fg:w="18"/><text x="45.6650%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6677) (8 samples, 0.27%)</title><rect x="45.7497%" y="372" width="0.2677%" height="15" fill="rgb(248,177,22)" fg:x="1367" fg:w="8"/><text x="45.9997%" y="382.50"></text></g><g><title>_get_value (pandas/core/series.py:1237) (64 samples, 2.14%)</title><rect x="44.7791%" y="340" width="2.1419%" height="15" fill="rgb(215,211,37)" fg:x="1338" fg:w="64"/><text x="45.0291%" y="350.50">_..</text></g><g><title>get_loc (pandas/core/indexes/base.py:3805) (27 samples, 0.90%)</title><rect x="46.0174%" y="356" width="0.9036%" height="15" fill="rgb(241,128,51)" fg:x="1375" fg:w="27"/><text x="46.2674%" y="366.50"></text></g><g><title>_values (pandas/core/series.py:831) (6 samples, 0.20%)</title><rect x="47.5904%" y="356" width="0.2008%" height="15" fill="rgb(227,165,31)" fg:x="1422" fg:w="6"/><text x="47.8404%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2004) (11 samples, 0.37%)</title><rect x="48.2597%" y="372" width="0.3681%" height="15" fill="rgb(228,167,24)" fg:x="1442" fg:w="11"/><text x="48.5097%" y="382.50"></text></g><g><title>calculate_server_cost (evaluation.py:280) (340 samples, 11.38%)</title><rect x="37.6506%" y="308" width="11.3788%" height="15" fill="rgb(228,143,12)" fg:x="1125" fg:w="340"/><text x="37.9006%" y="318.50">calculate_server_..</text></g><g><title>__getitem__ (pandas/core/series.py:1121) (158 samples, 5.29%)</title><rect x="43.7416%" y="324" width="5.2878%" height="15" fill="rgb(249,149,8)" fg:x="1307" fg:w="158"/><text x="43.9916%" y="334.50">__geti..</text></g><g><title>_get_value (pandas/core/series.py:1240) (62 samples, 2.07%)</title><rect x="46.9545%" y="340" width="2.0750%" height="15" fill="rgb(243,35,44)" fg:x="1403" fg:w="62"/><text x="47.2045%" y="350.50">_..</text></g><g><title>_values (pandas/core/series.py:863) (37 samples, 1.24%)</title><rect x="47.7912%" y="356" width="1.2383%" height="15" fill="rgb(246,89,9)" fg:x="1428" fg:w="37"/><text x="48.0412%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2006) (12 samples, 0.40%)</title><rect x="48.6278%" y="372" width="0.4016%" height="15" fill="rgb(233,213,13)" fg:x="1453" fg:w="12"/><text x="48.8778%" y="382.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1095) (8 samples, 0.27%)</title><rect x="49.1968%" y="324" width="0.2677%" height="15" fill="rgb(233,141,41)" fg:x="1470" fg:w="8"/><text x="49.4468%" y="334.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2765) (13 samples, 0.44%)</title><rect x="49.5315%" y="340" width="0.4351%" height="15" fill="rgb(239,167,4)" fg:x="1480" fg:w="13"/><text x="49.7815%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2770) (10 samples, 0.33%)</title><rect x="50.0000%" y="340" width="0.3347%" height="15" fill="rgb(209,217,16)" fg:x="1494" fg:w="10"/><text x="50.2500%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2771) (14 samples, 0.47%)</title><rect x="50.3347%" y="340" width="0.4685%" height="15" fill="rgb(219,88,35)" fg:x="1504" fg:w="14"/><text x="50.5847%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2779) (4 samples, 0.13%)</title><rect x="50.8367%" y="340" width="0.1339%" height="15" fill="rgb(220,193,23)" fg:x="1519" fg:w="4"/><text x="51.0867%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2780) (9 samples, 0.30%)</title><rect x="50.9705%" y="340" width="0.3012%" height="15" fill="rgb(230,90,52)" fg:x="1523" fg:w="9"/><text x="51.2205%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1096) (62 samples, 2.07%)</title><rect x="49.4645%" y="324" width="2.0750%" height="15" fill="rgb(252,106,19)" fg:x="1478" fg:w="62"/><text x="49.7145%" y="334.50">_..</text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2783) (8 samples, 0.27%)</title><rect x="51.2718%" y="340" width="0.2677%" height="15" fill="rgb(206,74,20)" fg:x="1532" fg:w="8"/><text x="51.5218%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:372) (7 samples, 0.23%)</title><rect x="51.8072%" y="340" width="0.2343%" height="15" fill="rgb(230,138,44)" fg:x="1548" fg:w="7"/><text x="52.0572%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:383) (21 samples, 0.70%)</title><rect x="52.0415%" y="340" width="0.7028%" height="15" fill="rgb(235,182,43)" fg:x="1555" fg:w="21"/><text x="52.2915%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1097) (45 samples, 1.51%)</title><rect x="51.5395%" y="324" width="1.5060%" height="15" fill="rgb(242,16,51)" fg:x="1540" fg:w="45"/><text x="51.7895%" y="334.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:386) (9 samples, 0.30%)</title><rect x="52.7443%" y="340" width="0.3012%" height="15" fill="rgb(248,9,4)" fg:x="1576" fg:w="9"/><text x="52.9943%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1104) (3 samples, 0.10%)</title><rect x="53.1124%" y="324" width="0.1004%" height="15" fill="rgb(210,31,22)" fg:x="1587" fg:w="3"/><text x="53.3624%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1105) (19 samples, 0.64%)</title><rect x="53.2129%" y="324" width="0.6359%" height="15" fill="rgb(239,54,39)" fg:x="1590" fg:w="19"/><text x="53.4629%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1108) (5 samples, 0.17%)</title><rect x="53.8487%" y="324" width="0.1673%" height="15" fill="rgb(230,99,41)" fg:x="1609" fg:w="5"/><text x="54.0987%" y="334.50"></text></g><g><title>_get_value (pandas/core/series.py:1220) (11 samples, 0.37%)</title><rect x="54.7189%" y="340" width="0.3681%" height="15" fill="rgb(253,106,12)" fg:x="1635" fg:w="11"/><text x="54.9689%" y="350.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3777) (7 samples, 0.23%)</title><rect x="55.7229%" y="356" width="0.2343%" height="15" fill="rgb(213,46,41)" fg:x="1665" fg:w="7"/><text x="55.9729%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6672) (7 samples, 0.23%)</title><rect x="56.0910%" y="372" width="0.2343%" height="15" fill="rgb(215,133,35)" fg:x="1676" fg:w="7"/><text x="56.3410%" y="382.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3803) (17 samples, 0.57%)</title><rect x="55.9572%" y="356" width="0.5689%" height="15" fill="rgb(213,28,5)" fg:x="1672" fg:w="17"/><text x="56.2072%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6677) (6 samples, 0.20%)</title><rect x="56.3253%" y="372" width="0.2008%" height="15" fill="rgb(215,77,49)" fg:x="1683" fg:w="6"/><text x="56.5753%" y="382.50"></text></g><g><title>_get_value (pandas/core/series.py:1237) (76 samples, 2.54%)</title><rect x="55.1539%" y="340" width="2.5435%" height="15" fill="rgb(248,100,22)" fg:x="1648" fg:w="76"/><text x="55.4039%" y="350.50">_g..</text></g><g><title>get_loc (pandas/core/indexes/base.py:3805) (35 samples, 1.17%)</title><rect x="56.5261%" y="356" width="1.1714%" height="15" fill="rgb(208,67,9)" fg:x="1689" fg:w="35"/><text x="56.7761%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2004) (7 samples, 0.23%)</title><rect x="59.2369%" y="372" width="0.2343%" height="15" fill="rgb(219,133,21)" fg:x="1770" fg:w="7"/><text x="59.4869%" y="382.50"></text></g><g><title>calculate_server_cost (evaluation.py:281) (327 samples, 10.94%)</title><rect x="49.0295%" y="308" width="10.9438%" height="15" fill="rgb(246,46,29)" fg:x="1465" fg:w="327"/><text x="49.2795%" y="318.50">calculate_server..</text></g><g><title>__getitem__ (pandas/core/series.py:1121) (178 samples, 5.96%)</title><rect x="54.0161%" y="324" width="5.9572%" height="15" fill="rgb(246,185,52)" fg:x="1614" fg:w="178"/><text x="54.2661%" y="334.50">__getite..</text></g><g><title>_get_value (pandas/core/series.py:1240) (67 samples, 2.24%)</title><rect x="57.7309%" y="340" width="2.2423%" height="15" fill="rgb(252,136,11)" fg:x="1725" fg:w="67"/><text x="57.9809%" y="350.50">_..</text></g><g><title>_values (pandas/core/series.py:863) (46 samples, 1.54%)</title><rect x="58.4337%" y="356" width="1.5395%" height="15" fill="rgb(219,138,53)" fg:x="1746" fg:w="46"/><text x="58.6837%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2006) (15 samples, 0.50%)</title><rect x="59.4712%" y="372" width="0.5020%" height="15" fill="rgb(211,51,23)" fg:x="1777" fg:w="15"/><text x="59.7212%" y="382.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1095) (12 samples, 0.40%)</title><rect x="60.6091%" y="324" width="0.4016%" height="15" fill="rgb(247,221,28)" fg:x="1811" fg:w="12"/><text x="60.8591%" y="334.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2765) (8 samples, 0.27%)</title><rect x="61.3454%" y="340" width="0.2677%" height="15" fill="rgb(251,222,45)" fg:x="1833" fg:w="8"/><text x="61.5954%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2770) (25 samples, 0.84%)</title><rect x="61.6131%" y="340" width="0.8367%" height="15" fill="rgb(217,162,53)" fg:x="1841" fg:w="25"/><text x="61.8631%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2771) (26 samples, 0.87%)</title><rect x="62.4498%" y="340" width="0.8701%" height="15" fill="rgb(229,93,14)" fg:x="1866" fg:w="26"/><text x="62.6998%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2779) (23 samples, 0.77%)</title><rect x="63.3869%" y="340" width="0.7697%" height="15" fill="rgb(209,67,49)" fg:x="1894" fg:w="23"/><text x="63.6369%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2780) (21 samples, 0.70%)</title><rect x="64.1566%" y="340" width="0.7028%" height="15" fill="rgb(213,87,29)" fg:x="1917" fg:w="21"/><text x="64.4066%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1096) (125 samples, 4.18%)</title><rect x="61.0107%" y="324" width="4.1834%" height="15" fill="rgb(205,151,52)" fg:x="1823" fg:w="125"/><text x="61.2607%" y="334.50">__get..</text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2783) (10 samples, 0.33%)</title><rect x="64.8594%" y="340" width="0.3347%" height="15" fill="rgb(253,215,39)" fg:x="1938" fg:w="10"/><text x="65.1094%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:372) (11 samples, 0.37%)</title><rect x="65.8300%" y="340" width="0.3681%" height="15" fill="rgb(221,220,41)" fg:x="1967" fg:w="11"/><text x="66.0800%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:383) (21 samples, 0.70%)</title><rect x="66.1981%" y="340" width="0.7028%" height="15" fill="rgb(218,133,21)" fg:x="1978" fg:w="21"/><text x="66.4481%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1097) (65 samples, 2.18%)</title><rect x="65.1941%" y="324" width="2.1754%" height="15" fill="rgb(221,193,43)" fg:x="1948" fg:w="65"/><text x="65.4441%" y="334.50">_..</text></g><g><title>apply_if_callable (pandas/core/common.py:386) (14 samples, 0.47%)</title><rect x="66.9009%" y="340" width="0.4685%" height="15" fill="rgb(240,128,52)" fg:x="1999" fg:w="14"/><text x="67.1509%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1099) (3 samples, 0.10%)</title><rect x="67.3695%" y="324" width="0.1004%" height="15" fill="rgb(253,114,12)" fg:x="2013" fg:w="3"/><text x="67.6195%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1104) (9 samples, 0.30%)</title><rect x="67.4699%" y="324" width="0.3012%" height="15" fill="rgb(215,223,47)" fg:x="2016" fg:w="9"/><text x="67.7199%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1105) (29 samples, 0.97%)</title><rect x="67.7711%" y="324" width="0.9705%" height="15" fill="rgb(248,225,23)" fg:x="2025" fg:w="29"/><text x="68.0211%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1108) (5 samples, 0.17%)</title><rect x="68.7416%" y="324" width="0.1673%" height="15" fill="rgb(250,108,0)" fg:x="2054" fg:w="5"/><text x="68.9916%" y="334.50"></text></g><g><title>_get_value (pandas/core/series.py:1220) (14 samples, 0.47%)</title><rect x="70.1138%" y="340" width="0.4685%" height="15" fill="rgb(228,208,7)" fg:x="2095" fg:w="14"/><text x="70.3638%" y="350.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3777) (13 samples, 0.44%)</title><rect x="71.2851%" y="356" width="0.4351%" height="15" fill="rgb(244,45,10)" fg:x="2130" fg:w="13"/><text x="71.5351%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6672) (17 samples, 0.57%)</title><rect x="72.0549%" y="372" width="0.5689%" height="15" fill="rgb(207,125,25)" fg:x="2153" fg:w="17"/><text x="72.3049%" y="382.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3803) (41 samples, 1.37%)</title><rect x="71.7202%" y="356" width="1.3722%" height="15" fill="rgb(210,195,18)" fg:x="2143" fg:w="41"/><text x="71.9702%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6677) (14 samples, 0.47%)</title><rect x="72.6238%" y="372" width="0.4685%" height="15" fill="rgb(249,80,12)" fg:x="2170" fg:w="14"/><text x="72.8738%" y="382.50"></text></g><g><title>_get_value (pandas/core/series.py:1237) (145 samples, 4.85%)</title><rect x="70.6158%" y="340" width="4.8527%" height="15" fill="rgb(221,65,9)" fg:x="2110" fg:w="145"/><text x="70.8658%" y="350.50">_get_v..</text></g><g><title>get_loc (pandas/core/indexes/base.py:3805) (71 samples, 2.38%)</title><rect x="73.0924%" y="356" width="2.3762%" height="15" fill="rgb(235,49,36)" fg:x="2184" fg:w="71"/><text x="73.3424%" y="366.50">ge..</text></g><g><title>_get_value (pandas/core/series.py:1239) (7 samples, 0.23%)</title><rect x="75.4685%" y="340" width="0.2343%" height="15" fill="rgb(225,32,20)" fg:x="2255" fg:w="7"/><text x="75.7185%" y="350.50"></text></g><g><title>_values (pandas/core/series.py:831) (6 samples, 0.20%)</title><rect x="77.4096%" y="356" width="0.2008%" height="15" fill="rgb(215,141,46)" fg:x="2313" fg:w="6"/><text x="77.6596%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2004) (6 samples, 0.20%)</title><rect x="78.6479%" y="372" width="0.2008%" height="15" fill="rgb(250,160,47)" fg:x="2350" fg:w="6"/><text x="78.8979%" y="382.50"></text></g><g><title>calculate_server_cost (evaluation.py:282) (600 samples, 20.08%)</title><rect x="59.9732%" y="308" width="20.0803%" height="15" fill="rgb(216,222,40)" fg:x="1792" fg:w="600"/><text x="60.2232%" y="318.50">calculate_server_cost (evaluatio..</text></g><g><title>__getitem__ (pandas/core/series.py:1121) (331 samples, 11.08%)</title><rect x="68.9759%" y="324" width="11.0776%" height="15" fill="rgb(234,217,39)" fg:x="2061" fg:w="331"/><text x="69.2259%" y="334.50">__getitem__ (pan..</text></g><g><title>_get_value (pandas/core/series.py:1240) (130 samples, 4.35%)</title><rect x="75.7028%" y="340" width="4.3507%" height="15" fill="rgb(207,178,40)" fg:x="2262" fg:w="130"/><text x="75.9528%" y="350.50">_get_..</text></g><g><title>_values (pandas/core/series.py:863) (73 samples, 2.44%)</title><rect x="77.6104%" y="356" width="2.4431%" height="15" fill="rgb(221,136,13)" fg:x="2319" fg:w="73"/><text x="77.8604%" y="366.50">_v..</text></g><g><title>internal_values (pandas/core/internals/managers.py:2006) (36 samples, 1.20%)</title><rect x="78.8487%" y="372" width="1.2048%" height="15" fill="rgb(249,199,10)" fg:x="2356" fg:w="36"/><text x="79.0987%" y="382.50"></text></g><g><title>calculate_server_cost (evaluation.py:283) (5 samples, 0.17%)</title><rect x="80.0535%" y="308" width="0.1673%" height="15" fill="rgb(249,222,13)" fg:x="2392" fg:w="5"/><text x="80.3035%" y="318.50"></text></g><g><title>get_maintenance_cost (evaluation.py:293) (15 samples, 0.50%)</title><rect x="80.3548%" y="324" width="0.5020%" height="15" fill="rgb(244,185,38)" fg:x="2401" fg:w="15"/><text x="80.6048%" y="334.50"></text></g><g><title>calculate_server_cost (evaluation.py:284) (129 samples, 4.32%)</title><rect x="80.2209%" y="308" width="4.3173%" height="15" fill="rgb(236,202,9)" fg:x="2397" fg:w="129"/><text x="80.4709%" y="318.50">calcu..</text></g><g><title>get_maintenance_cost (evaluation.py:294) (110 samples, 3.68%)</title><rect x="80.8568%" y="324" width="3.6814%" height="15" fill="rgb(250,229,37)" fg:x="2416" fg:w="110"/><text x="81.1068%" y="334.50">get_..</text></g><g><title>calculate_server_cost (evaluation.py:285) (8 samples, 0.27%)</title><rect x="84.5382%" y="308" width="0.2677%" height="15" fill="rgb(206,174,23)" fg:x="2526" fg:w="8"/><text x="84.7882%" y="318.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1095) (6 samples, 0.20%)</title><rect x="85.1071%" y="324" width="0.2008%" height="15" fill="rgb(211,33,43)" fg:x="2543" fg:w="6"/><text x="85.3571%" y="334.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2765) (6 samples, 0.20%)</title><rect x="85.4752%" y="340" width="0.2008%" height="15" fill="rgb(245,58,50)" fg:x="2554" fg:w="6"/><text x="85.7252%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2770) (12 samples, 0.40%)</title><rect x="85.6760%" y="340" width="0.4016%" height="15" fill="rgb(244,68,36)" fg:x="2560" fg:w="12"/><text x="85.9260%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2771) (13 samples, 0.44%)</title><rect x="86.0776%" y="340" width="0.4351%" height="15" fill="rgb(232,229,15)" fg:x="2572" fg:w="13"/><text x="86.3276%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2779) (13 samples, 0.44%)</title><rect x="86.5127%" y="340" width="0.4351%" height="15" fill="rgb(254,30,23)" fg:x="2585" fg:w="13"/><text x="86.7627%" y="350.50"></text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2780) (12 samples, 0.40%)</title><rect x="86.9478%" y="340" width="0.4016%" height="15" fill="rgb(235,160,14)" fg:x="2598" fg:w="12"/><text x="87.1978%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1096) (66 samples, 2.21%)</title><rect x="85.3079%" y="324" width="2.2088%" height="15" fill="rgb(212,155,44)" fg:x="2549" fg:w="66"/><text x="85.5579%" y="334.50">_..</text></g><g><title>check_dict_or_set_indexers (pandas/core/indexing.py:2783) (5 samples, 0.17%)</title><rect x="87.3494%" y="340" width="0.1673%" height="15" fill="rgb(226,2,50)" fg:x="2610" fg:w="5"/><text x="87.5994%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:372) (4 samples, 0.13%)</title><rect x="88.0187%" y="340" width="0.1339%" height="15" fill="rgb(234,177,6)" fg:x="2630" fg:w="4"/><text x="88.2687%" y="350.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:383) (5 samples, 0.17%)</title><rect x="88.1526%" y="340" width="0.1673%" height="15" fill="rgb(217,24,9)" fg:x="2634" fg:w="5"/><text x="88.4026%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1097) (27 samples, 0.90%)</title><rect x="87.5167%" y="324" width="0.9036%" height="15" fill="rgb(220,13,46)" fg:x="2615" fg:w="27"/><text x="87.7667%" y="334.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:386) (3 samples, 0.10%)</title><rect x="88.3199%" y="340" width="0.1004%" height="15" fill="rgb(239,221,27)" fg:x="2639" fg:w="3"/><text x="88.5699%" y="350.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1104) (5 samples, 0.17%)</title><rect x="88.4538%" y="324" width="0.1673%" height="15" fill="rgb(222,198,25)" fg:x="2643" fg:w="5"/><text x="88.7038%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1105) (11 samples, 0.37%)</title><rect x="88.6212%" y="324" width="0.3681%" height="15" fill="rgb(211,99,13)" fg:x="2648" fg:w="11"/><text x="88.8712%" y="334.50"></text></g><g><title>__getitem__ (pandas/core/series.py:1108) (4 samples, 0.13%)</title><rect x="88.9893%" y="324" width="0.1339%" height="15" fill="rgb(232,111,31)" fg:x="2659" fg:w="4"/><text x="89.2393%" y="334.50"></text></g><g><title>_get_value (pandas/core/series.py:1220) (8 samples, 0.27%)</title><rect x="89.7256%" y="340" width="0.2677%" height="15" fill="rgb(245,82,37)" fg:x="2681" fg:w="8"/><text x="89.9756%" y="350.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3777) (7 samples, 0.23%)</title><rect x="90.6292%" y="356" width="0.2343%" height="15" fill="rgb(227,149,46)" fg:x="2708" fg:w="7"/><text x="90.8792%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6672) (7 samples, 0.23%)</title><rect x="91.0977%" y="372" width="0.2343%" height="15" fill="rgb(218,36,50)" fg:x="2722" fg:w="7"/><text x="91.3477%" y="382.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3803) (19 samples, 0.64%)</title><rect x="90.8635%" y="356" width="0.6359%" height="15" fill="rgb(226,80,48)" fg:x="2715" fg:w="19"/><text x="91.1135%" y="366.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6677) (5 samples, 0.17%)</title><rect x="91.3320%" y="372" width="0.1673%" height="15" fill="rgb(238,224,15)" fg:x="2729" fg:w="5"/><text x="91.5820%" y="382.50"></text></g><g><title>_get_value (pandas/core/series.py:1237) (70 samples, 2.34%)</title><rect x="90.0268%" y="340" width="2.3427%" height="15" fill="rgb(241,136,10)" fg:x="2690" fg:w="70"/><text x="90.2768%" y="350.50">_..</text></g><g><title>get_loc (pandas/core/indexes/base.py:3805) (26 samples, 0.87%)</title><rect x="91.4993%" y="356" width="0.8701%" height="15" fill="rgb(208,32,45)" fg:x="2734" fg:w="26"/><text x="91.7493%" y="366.50"></text></g><g><title>_get_value (pandas/core/series.py:1239) (5 samples, 0.17%)</title><rect x="92.3695%" y="340" width="0.1673%" height="15" fill="rgb(207,135,9)" fg:x="2760" fg:w="5"/><text x="92.6195%" y="350.50"></text></g><g><title>_values (pandas/core/series.py:831) (9 samples, 0.30%)</title><rect x="93.2731%" y="356" width="0.3012%" height="15" fill="rgb(206,86,44)" fg:x="2787" fg:w="9"/><text x="93.5231%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2004) (9 samples, 0.30%)</title><rect x="94.0763%" y="372" width="0.3012%" height="15" fill="rgb(245,177,15)" fg:x="2811" fg:w="9"/><text x="94.3263%" y="382.50"></text></g><g><title>calculate_server_cost (evaluation.py:288) (304 samples, 10.17%)</title><rect x="84.8059%" y="308" width="10.1740%" height="15" fill="rgb(206,64,50)" fg:x="2534" fg:w="304"/><text x="85.0559%" y="318.50">calculate_serve..</text></g><g><title>__getitem__ (pandas/core/series.py:1121) (175 samples, 5.86%)</title><rect x="89.1232%" y="324" width="5.8568%" height="15" fill="rgb(234,36,40)" fg:x="2663" fg:w="175"/><text x="89.3732%" y="334.50">__getit..</text></g><g><title>_get_value (pandas/core/series.py:1240) (73 samples, 2.44%)</title><rect x="92.5368%" y="340" width="2.4431%" height="15" fill="rgb(213,64,8)" fg:x="2765" fg:w="73"/><text x="92.7868%" y="350.50">_g..</text></g><g><title>_values (pandas/core/series.py:863) (42 samples, 1.41%)</title><rect x="93.5743%" y="356" width="1.4056%" height="15" fill="rgb(210,75,36)" fg:x="2796" fg:w="42"/><text x="93.8243%" y="366.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2006) (18 samples, 0.60%)</title><rect x="94.3775%" y="372" width="0.6024%" height="15" fill="rgb(229,88,21)" fg:x="2820" fg:w="18"/><text x="94.6275%" y="382.50"></text></g><g><title>apply_series_generator (pandas/core/apply.py:1081) (2,430 samples, 81.33%)</title><rect x="14.0562%" y="292" width="81.3253%" height="15" fill="rgb(252,204,47)" fg:x="420" fg:w="2430"/><text x="14.3062%" y="302.50">apply_series_generator (pandas/core/apply.py:1081)</text></g><g><title>calculate_server_cost (evaluation.py:290) (12 samples, 0.40%)</title><rect x="94.9799%" y="308" width="0.4016%" height="15" fill="rgb(208,77,27)" fg:x="2838" fg:w="12"/><text x="95.2299%" y="318.50"></text></g><g><title>_instancecheck (pandas/core/dtypes/generic.py:42) (5 samples, 0.17%)</title><rect x="96.2182%" y="308" width="0.1673%" height="15" fill="rgb(221,76,26)" fg:x="2875" fg:w="5"/><text x="96.4682%" y="318.50"></text></g><g><title>_check (pandas/core/dtypes/generic.py:37) (9 samples, 0.30%)</title><rect x="96.5863%" y="324" width="0.3012%" height="15" fill="rgb(225,139,18)" fg:x="2886" fg:w="9"/><text x="96.8363%" y="334.50"></text></g><g><title>apply_standard (pandas/core/apply.py:1063) (2,739 samples, 91.67%)</title><rect x="6.0241%" y="276" width="91.6667%" height="15" fill="rgb(230,137,11)" fg:x="180" fg:w="2739"/><text x="6.2741%" y="286.50">apply_standard (pandas/core/apply.py:1063)</text></g><g><title>apply_series_generator (pandas/core/apply.py:1082) (69 samples, 2.31%)</title><rect x="95.3815%" y="292" width="2.3092%" height="15" fill="rgb(212,28,1)" fg:x="2850" fg:w="69"/><text x="95.6315%" y="302.50">a..</text></g><g><title>_instancecheck (pandas/core/dtypes/generic.py:44) (39 samples, 1.31%)</title><rect x="96.3855%" y="308" width="1.3052%" height="15" fill="rgb(248,164,17)" fg:x="2880" fg:w="39"/><text x="96.6355%" y="318.50"></text></g><g><title>_check (pandas/core/dtypes/generic.py:38) (24 samples, 0.80%)</title><rect x="96.8876%" y="324" width="0.8032%" height="15" fill="rgb(222,171,42)" fg:x="2895" fg:w="24"/><text x="97.1376%" y="334.50"></text></g><g><title>__init__ (pandas/core/series.py:490) (16 samples, 0.54%)</title><rect x="97.6908%" y="340" width="0.5355%" height="15" fill="rgb(243,84,45)" fg:x="2919" fg:w="16"/><text x="97.9408%" y="350.50"></text></g><g><title>ensure_index (pandas/core/indexes/base.py:7649) (16 samples, 0.54%)</title><rect x="97.6908%" y="356" width="0.5355%" height="15" fill="rgb(252,49,23)" fg:x="2919" fg:w="16"/><text x="97.9408%" y="366.50"></text></g><g><title>__new__ (pandas/core/indexes/base.py:565) (16 samples, 0.54%)</title><rect x="97.6908%" y="372" width="0.5355%" height="15" fill="rgb(215,19,7)" fg:x="2919" fg:w="16"/><text x="97.9408%" y="382.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:654) (16 samples, 0.54%)</title><rect x="97.6908%" y="388" width="0.5355%" height="15" fill="rgb(238,81,41)" fg:x="2919" fg:w="16"/><text x="97.9408%" y="398.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:139) (16 samples, 0.54%)</title><rect x="97.6908%" y="404" width="0.5355%" height="15" fill="rgb(210,199,37)" fg:x="2919" fg:w="16"/><text x="97.9408%" y="414.50"></text></g><g><title>wrap_results (pandas/core/apply.py:1118) (30 samples, 1.00%)</title><rect x="97.6908%" y="292" width="1.0040%" height="15" fill="rgb(244,192,49)" fg:x="2919" fg:w="30"/><text x="97.9408%" y="302.50"></text></g><g><title>__init__ (pandas/core/series.py:537) (30 samples, 1.00%)</title><rect x="97.6908%" y="308" width="1.0040%" height="15" fill="rgb(226,211,11)" fg:x="2919" fg:w="30"/><text x="97.9408%" y="318.50"></text></g><g><title>_init_dict (pandas/core/series.py:651) (30 samples, 1.00%)</title><rect x="97.6908%" y="324" width="1.0040%" height="15" fill="rgb(236,162,54)" fg:x="2919" fg:w="30"/><text x="97.9408%" y="334.50"></text></g><g><title>__init__ (pandas/core/series.py:584) (14 samples, 0.47%)</title><rect x="98.2262%" y="340" width="0.4685%" height="15" fill="rgb(220,229,9)" fg:x="2935" fg:w="14"/><text x="98.4762%" y="350.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:654) (13 samples, 0.44%)</title><rect x="98.2597%" y="356" width="0.4351%" height="15" fill="rgb(250,87,22)" fg:x="2936" fg:w="13"/><text x="98.5097%" y="366.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:139) (11 samples, 0.37%)</title><rect x="98.3266%" y="372" width="0.3681%" height="15" fill="rgb(239,43,17)" fg:x="2938" fg:w="11"/><text x="98.5766%" y="382.50"></text></g><g><title>get_cost (evaluation.py:272) (2,778 samples, 92.97%)</title><rect x="5.7898%" y="228" width="92.9719%" height="15" fill="rgb(231,177,25)" fg:x="173" fg:w="2778"/><text x="6.0398%" y="238.50">get_cost (evaluation.py:272)</text></g><g><title>apply (pandas/core/frame.py:10374) (2,771 samples, 92.74%)</title><rect x="6.0241%" y="244" width="92.7376%" height="15" fill="rgb(219,179,1)" fg:x="180" fg:w="2771"/><text x="6.2741%" y="254.50">apply (pandas/core/frame.py:10374)</text></g><g><title>apply (pandas/core/apply.py:916) (2,771 samples, 92.74%)</title><rect x="6.0241%" y="260" width="92.7376%" height="15" fill="rgb(238,219,53)" fg:x="180" fg:w="2771"/><text x="6.2741%" y="270.50">apply (pandas/core/apply.py:916)</text></g><g><title>apply_standard (pandas/core/apply.py:1068) (32 samples, 1.07%)</title><rect x="97.6908%" y="276" width="1.0710%" height="15" fill="rgb(232,167,36)" fg:x="2919" fg:w="32"/><text x="97.9408%" y="286.50"></text></g><g><title>get_evaluation (evaluation.py:386) (2,783 samples, 93.14%)</title><rect x="5.6560%" y="196" width="93.1392%" height="15" fill="rgb(244,19,51)" fg:x="169" fg:w="2783"/><text x="5.9060%" y="206.50">get_evaluation (evaluation.py:386)</text></g><g><title>get_profit (evaluation.py:252) (2,779 samples, 93.01%)</title><rect x="5.7898%" y="212" width="93.0054%" height="15" fill="rgb(224,6,22)" fg:x="173" fg:w="2779"/><text x="6.0398%" y="222.50">get_profit (evaluation.py:252)</text></g><g><title>run (profile.py:54) (2,953 samples, 98.83%)</title><rect x="0.0669%" y="100" width="98.8286%" height="15" fill="rgb(224,145,5)" fg:x="2" fg:w="2953"/><text x="0.3169%" y="110.50">run (profile.py:54)</text></g><g><title>run (cProfile.py:96) (2,953 samples, 98.83%)</title><rect x="0.0669%" y="116" width="98.8286%" height="15" fill="rgb(234,130,49)" fg:x="2" fg:w="2953"/><text x="0.3169%" y="126.50">run (cProfile.py:96)</text></g><g><title>runctx (cProfile.py:101) (2,953 samples, 98.83%)</title><rect x="0.0669%" y="132" width="98.8286%" height="15" fill="rgb(254,6,2)" fg:x="2" fg:w="2953"/><text x="0.3169%" y="142.50">runctx (cProfile.py:101)</text></g><g><title>&lt;module&gt; (&lt;string&gt;:1) (2,953 samples, 98.83%)</title><rect x="0.0669%" y="148" width="98.8286%" height="15" fill="rgb(208,96,46)" fg:x="2" fg:w="2953"/><text x="0.3169%" y="158.50">&lt;module&gt; (&lt;string&gt;:1)</text></g><g><title>main (evaluation_example.py:18) (2,951 samples, 98.76%)</title><rect x="0.1339%" y="164" width="98.7617%" height="15" fill="rgb(239,3,39)" fg:x="4" fg:w="2951"/><text x="0.3839%" y="174.50">main (evaluation_example.py:18)</text></g><g><title>evaluation_function (evaluation.py:461) (2,951 samples, 98.76%)</title><rect x="0.1339%" y="180" width="98.7617%" height="15" fill="rgb(233,210,1)" fg:x="4" fg:w="2951"/><text x="0.3839%" y="190.50">evaluation_function (evaluation.py:461)</text></g><g><title>get_evaluation (evaluation.py:394) (3 samples, 0.10%)</title><rect x="98.7952%" y="196" width="0.1004%" height="15" fill="rgb(244,137,37)" fg:x="2952" fg:w="3"/><text x="99.0452%" y="206.50"></text></g><g><title>put_fleet_on_hold (evaluation.py:322) (3 samples, 0.10%)</title><rect x="98.7952%" y="212" width="0.1004%" height="15" fill="rgb(240,136,2)" fg:x="2952" fg:w="3"/><text x="99.0452%" y="222.50"></text></g><g><title>__setitem__ (pandas/core/frame.py:4311) (3 samples, 0.10%)</title><rect x="98.7952%" y="228" width="0.1004%" height="15" fill="rgb(239,18,37)" fg:x="2952" fg:w="3"/><text x="99.0452%" y="238.50"></text></g><g><title>snapshot_stats (cProfile.py:56) (4 samples, 0.13%)</title><rect x="98.8956%" y="164" width="0.1339%" height="15" fill="rgb(218,185,22)" fg:x="2955" fg:w="4"/><text x="99.1456%" y="174.50"></text></g><g><title>&lt;module&gt; (evaluation_example.py:27) (2,960 samples, 99.06%)</title><rect x="0.0000%" y="68" width="99.0629%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="2960"/><text x="0.2500%" y="78.50">&lt;module&gt; (evaluation_example.py:27)</text></g><g><title>run (cProfile.py:17) (2,960 samples, 99.06%)</title><rect x="0.0000%" y="84" width="99.0629%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="2960"/><text x="0.2500%" y="94.50">run (cProfile.py:17)</text></g><g><title>run (profile.py:58) (5 samples, 0.17%)</title><rect x="98.8956%" y="100" width="0.1673%" height="15" fill="rgb(242,56,43)" fg:x="2955" fg:w="5"/><text x="99.1456%" y="110.50"></text></g><g><title>_show (profile.py:71) (5 samples, 0.17%)</title><rect x="98.8956%" y="116" width="0.1673%" height="15" fill="rgb(233,99,24)" fg:x="2955" fg:w="5"/><text x="99.1456%" y="126.50"></text></g><g><title>dump_stats (cProfile.py:48) (5 samples, 0.17%)</title><rect x="98.8956%" y="132" width="0.1673%" height="15" fill="rgb(234,209,42)" fg:x="2955" fg:w="5"/><text x="99.1456%" y="142.50"></text></g><g><title>create_stats (cProfile.py:53) (5 samples, 0.17%)</title><rect x="98.8956%" y="148" width="0.1673%" height="15" fill="rgb(227,7,12)" fg:x="2955" fg:w="5"/><text x="99.1456%" y="158.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_stats_py.py:38) (6 samples, 0.20%)</title><rect x="99.1299%" y="356" width="0.2008%" height="15" fill="rgb(245,203,43)" fg:x="2962" fg:w="6"/><text x="99.3799%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (6 samples, 0.20%)</title><rect x="99.1299%" y="372" width="0.2008%" height="15" fill="rgb(238,205,33)" fg:x="2962" fg:w="6"/><text x="99.3799%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:972) (6 samples, 0.20%)</title><rect x="99.1299%" y="388" width="0.2008%" height="15" fill="rgb(231,56,7)" fg:x="2962" fg:w="6"/><text x="99.3799%" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (6 samples, 0.20%)</title><rect x="99.1299%" y="404" width="0.2008%" height="15" fill="rgb(244,186,29)" fg:x="2962" fg:w="6"/><text x="99.3799%" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (6 samples, 0.20%)</title><rect x="99.1299%" y="420" width="0.2008%" height="15" fill="rgb(234,111,31)" fg:x="2962" fg:w="6"/><text x="99.3799%" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (6 samples, 0.20%)</title><rect x="99.1299%" y="436" width="0.2008%" height="15" fill="rgb(241,149,10)" fg:x="2962" fg:w="6"/><text x="99.3799%" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (6 samples, 0.20%)</title><rect x="99.1299%" y="452" width="0.2008%" height="15" fill="rgb(249,206,44)" fg:x="2962" fg:w="6"/><text x="99.3799%" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (6 samples, 0.20%)</title><rect x="99.1299%" y="468" width="0.2008%" height="15" fill="rgb(251,153,30)" fg:x="2962" fg:w="6"/><text x="99.3799%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (6 samples, 0.20%)</title><rect x="99.1299%" y="484" width="0.2008%" height="15" fill="rgb(239,152,38)" fg:x="2962" fg:w="6"/><text x="99.3799%" y="494.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:982) (3 samples, 0.10%)</title><rect x="99.3307%" y="484" width="0.1004%" height="15" fill="rgb(249,139,47)" fg:x="2968" fg:w="3"/><text x="99.5807%" y="494.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:925) (3 samples, 0.10%)</title><rect x="99.3307%" y="500" width="0.1004%" height="15" fill="rgb(244,64,35)" fg:x="2968" fg:w="3"/><text x="99.5807%" y="510.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1423) (3 samples, 0.10%)</title><rect x="99.3307%" y="516" width="0.1004%" height="15" fill="rgb(216,46,15)" fg:x="2968" fg:w="3"/><text x="99.5807%" y="526.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1395) (3 samples, 0.10%)</title><rect x="99.3307%" y="532" width="0.1004%" height="15" fill="rgb(250,74,19)" fg:x="2968" fg:w="3"/><text x="99.5807%" y="542.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1526) (3 samples, 0.10%)</title><rect x="99.3307%" y="548" width="0.1004%" height="15" fill="rgb(249,42,33)" fg:x="2968" fg:w="3"/><text x="99.5807%" y="558.50"></text></g><g><title>_fill_cache (&lt;frozen importlib._bootstrap_external&gt;:1569) (3 samples, 0.10%)</title><rect x="99.3307%" y="564" width="0.1004%" height="15" fill="rgb(242,149,17)" fg:x="2968" fg:w="3"/><text x="99.5807%" y="574.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_stats_py.py:41) (5 samples, 0.17%)</title><rect x="99.3307%" y="356" width="0.1673%" height="15" fill="rgb(244,29,21)" fg:x="2968" fg:w="5"/><text x="99.5807%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (5 samples, 0.17%)</title><rect x="99.3307%" y="372" width="0.1673%" height="15" fill="rgb(220,130,37)" fg:x="2968" fg:w="5"/><text x="99.5807%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (5 samples, 0.17%)</title><rect x="99.3307%" y="388" width="0.1673%" height="15" fill="rgb(211,67,2)" fg:x="2968" fg:w="5"/><text x="99.5807%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (5 samples, 0.17%)</title><rect x="99.3307%" y="404" width="0.1673%" height="15" fill="rgb(235,68,52)" fg:x="2968" fg:w="5"/><text x="99.5807%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (5 samples, 0.17%)</title><rect x="99.3307%" y="420" width="0.1673%" height="15" fill="rgb(246,142,3)" fg:x="2968" fg:w="5"/><text x="99.5807%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (5 samples, 0.17%)</title><rect x="99.3307%" y="436" width="0.1673%" height="15" fill="rgb(241,25,7)" fg:x="2968" fg:w="5"/><text x="99.5807%" y="446.50"></text></g><g><title>&lt;module&gt; (scipy/ndimage/__init__.py:152) (5 samples, 0.17%)</title><rect x="99.3307%" y="452" width="0.1673%" height="15" fill="rgb(242,119,39)" fg:x="2968" fg:w="5"/><text x="99.5807%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (5 samples, 0.17%)</title><rect x="99.3307%" y="468" width="0.1673%" height="15" fill="rgb(241,98,45)" fg:x="2968" fg:w="5"/><text x="99.5807%" y="478.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_stats_py.py:42) (6 samples, 0.20%)</title><rect x="99.4980%" y="356" width="0.2008%" height="15" fill="rgb(254,28,30)" fg:x="2973" fg:w="6"/><text x="99.7480%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (6 samples, 0.20%)</title><rect x="99.4980%" y="372" width="0.2008%" height="15" fill="rgb(241,142,54)" fg:x="2973" fg:w="6"/><text x="99.7480%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (6 samples, 0.20%)</title><rect x="99.4980%" y="388" width="0.2008%" height="15" fill="rgb(222,85,15)" fg:x="2973" fg:w="6"/><text x="99.7480%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (6 samples, 0.20%)</title><rect x="99.4980%" y="404" width="0.2008%" height="15" fill="rgb(210,85,47)" fg:x="2973" fg:w="6"/><text x="99.7480%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (6 samples, 0.20%)</title><rect x="99.4980%" y="420" width="0.2008%" height="15" fill="rgb(224,206,25)" fg:x="2973" fg:w="6"/><text x="99.7480%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (6 samples, 0.20%)</title><rect x="99.4980%" y="436" width="0.2008%" height="15" fill="rgb(243,201,19)" fg:x="2973" fg:w="6"/><text x="99.7480%" y="446.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py:10) (3 samples, 0.10%)</title><rect x="99.6988%" y="484" width="0.1004%" height="15" fill="rgb(236,59,4)" fg:x="2979" fg:w="3"/><text x="99.9488%" y="494.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1058) (3 samples, 0.10%)</title><rect x="99.6988%" y="500" width="0.1004%" height="15" fill="rgb(254,179,45)" fg:x="2979" fg:w="3"/><text x="99.9488%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (3 samples, 0.10%)</title><rect x="99.6988%" y="516" width="0.1004%" height="15" fill="rgb(226,14,10)" fg:x="2979" fg:w="3"/><text x="99.9488%" y="526.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (3 samples, 0.10%)</title><rect x="99.6988%" y="532" width="0.1004%" height="15" fill="rgb(244,27,41)" fg:x="2979" fg:w="3"/><text x="99.9488%" y="542.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (3 samples, 0.10%)</title><rect x="99.6988%" y="548" width="0.1004%" height="15" fill="rgb(235,35,32)" fg:x="2979" fg:w="3"/><text x="99.9488%" y="558.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (3 samples, 0.10%)</title><rect x="99.6988%" y="564" width="0.1004%" height="15" fill="rgb(218,68,31)" fg:x="2979" fg:w="3"/><text x="99.9488%" y="574.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (3 samples, 0.10%)</title><rect x="99.6988%" y="580" width="0.1004%" height="15" fill="rgb(207,120,37)" fg:x="2979" fg:w="3"/><text x="99.9488%" y="590.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (3 samples, 0.10%)</title><rect x="99.6988%" y="596" width="0.1004%" height="15" fill="rgb(227,98,0)" fg:x="2979" fg:w="3"/><text x="99.9488%" y="606.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_stats_py.py:49) (6 samples, 0.20%)</title><rect x="99.6988%" y="356" width="0.2008%" height="15" fill="rgb(207,7,3)" fg:x="2979" fg:w="6"/><text x="99.9488%" y="366.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1058) (6 samples, 0.20%)</title><rect x="99.6988%" y="372" width="0.2008%" height="15" fill="rgb(206,98,19)" fg:x="2979" fg:w="6"/><text x="99.9488%" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (6 samples, 0.20%)</title><rect x="99.6988%" y="388" width="0.2008%" height="15" fill="rgb(217,5,26)" fg:x="2979" fg:w="6"/><text x="99.9488%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (6 samples, 0.20%)</title><rect x="99.6988%" y="404" width="0.2008%" height="15" fill="rgb(235,190,38)" fg:x="2979" fg:w="6"/><text x="99.9488%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (6 samples, 0.20%)</title><rect x="99.6988%" y="420" width="0.2008%" height="15" fill="rgb(247,86,24)" fg:x="2979" fg:w="6"/><text x="99.9488%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (6 samples, 0.20%)</title><rect x="99.6988%" y="436" width="0.2008%" height="15" fill="rgb(205,101,16)" fg:x="2979" fg:w="6"/><text x="99.9488%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (6 samples, 0.20%)</title><rect x="99.6988%" y="452" width="0.2008%" height="15" fill="rgb(246,168,33)" fg:x="2979" fg:w="6"/><text x="99.9488%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (6 samples, 0.20%)</title><rect x="99.6988%" y="468" width="0.2008%" height="15" fill="rgb(231,114,1)" fg:x="2979" fg:w="6"/><text x="99.9488%" y="478.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:606) (26 samples, 0.87%)</title><rect x="99.0964%" y="260" width="0.8701%" height="15" fill="rgb(207,184,53)" fg:x="2961" fg:w="26"/><text x="99.3464%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (26 samples, 0.87%)</title><rect x="99.0964%" y="276" width="0.8701%" height="15" fill="rgb(224,95,51)" fg:x="2961" fg:w="26"/><text x="99.3464%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (26 samples, 0.87%)</title><rect x="99.0964%" y="292" width="0.8701%" height="15" fill="rgb(212,188,45)" fg:x="2961" fg:w="26"/><text x="99.3464%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (26 samples, 0.87%)</title><rect x="99.0964%" y="308" width="0.8701%" height="15" fill="rgb(223,154,38)" fg:x="2961" fg:w="26"/><text x="99.3464%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (26 samples, 0.87%)</title><rect x="99.0964%" y="324" width="0.8701%" height="15" fill="rgb(251,22,52)" fg:x="2961" fg:w="26"/><text x="99.3464%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (26 samples, 0.87%)</title><rect x="99.0964%" y="340" width="0.8701%" height="15" fill="rgb(229,209,22)" fg:x="2961" fg:w="26"/><text x="99.3464%" y="350.50"></text></g><g><title>all (2,988 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(234,138,34)" fg:x="0" fg:w="2988"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (evaluation_example.py:5) (27 samples, 0.90%)</title><rect x="99.0964%" y="68" width="0.9036%" height="15" fill="rgb(212,95,11)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (27 samples, 0.90%)</title><rect x="99.0964%" y="84" width="0.9036%" height="15" fill="rgb(240,179,47)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (27 samples, 0.90%)</title><rect x="99.0964%" y="100" width="0.9036%" height="15" fill="rgb(240,163,11)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (27 samples, 0.90%)</title><rect x="99.0964%" y="116" width="0.9036%" height="15" fill="rgb(236,37,12)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (27 samples, 0.90%)</title><rect x="99.0964%" y="132" width="0.9036%" height="15" fill="rgb(232,164,16)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (27 samples, 0.90%)</title><rect x="99.0964%" y="148" width="0.9036%" height="15" fill="rgb(244,205,15)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="158.50"></text></g><g><title>&lt;module&gt; (evaluation.py:6) (27 samples, 0.90%)</title><rect x="99.0964%" y="164" width="0.9036%" height="15" fill="rgb(223,117,47)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (27 samples, 0.90%)</title><rect x="99.0964%" y="180" width="0.9036%" height="15" fill="rgb(244,107,35)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (27 samples, 0.90%)</title><rect x="99.0964%" y="196" width="0.9036%" height="15" fill="rgb(205,140,8)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (27 samples, 0.90%)</title><rect x="99.0964%" y="212" width="0.9036%" height="15" fill="rgb(228,84,46)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (27 samples, 0.90%)</title><rect x="99.0964%" y="228" width="0.9036%" height="15" fill="rgb(254,188,9)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (27 samples, 0.90%)</title><rect x="99.0964%" y="244" width="0.9036%" height="15" fill="rgb(206,112,54)" fg:x="2961" fg:w="27"/><text x="99.3464%" y="254.50"></text></g></svg></svg>